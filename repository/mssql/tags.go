// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

 package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tag is an object representing the database table.
type Tag struct {
	ID  int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Tag string `boil:"tag" json:"tag" toml:"tag" yaml:"tag"`

	R *tagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TagColumns = struct {
	ID  string
	Tag string
}{
	ID:  "id",
	Tag: "tag",
}

var TagTableColumns = struct {
	ID  string
	Tag string
}{
	ID:  "tags.id",
	Tag: "tags.tag",
}

// Generated where

var TagWhere = struct {
	ID  whereHelperint
	Tag whereHelperstring
}{
	ID:  whereHelperint{field: "[dbo].[tags].[id]"},
	Tag: whereHelperstring{field: "[dbo].[tags].[tag]"},
}

// TagRels is where relationship names are stored.
var TagRels = struct {
	Bookmarks               string
	ChildTagChildTags       string
	ParentTagChildTags      string
	Documents               string
	ChildTagTagParentPaths  string
	ParentTagTagParentPaths string
}{
	Bookmarks:               "Bookmarks",
	ChildTagChildTags:       "ChildTagChildTags",
	ParentTagChildTags:      "ParentTagChildTags",
	Documents:               "Documents",
	ChildTagTagParentPaths:  "ChildTagTagParentPaths",
	ParentTagTagParentPaths: "ParentTagTagParentPaths",
}

// tagR is where relationships are stored.
type tagR struct {
	Bookmarks               BookmarkSlice      `boil:"Bookmarks" json:"Bookmarks" toml:"Bookmarks" yaml:"Bookmarks"`
	ChildTagChildTags       ChildTagSlice      `boil:"ChildTagChildTags" json:"ChildTagChildTags" toml:"ChildTagChildTags" yaml:"ChildTagChildTags"`
	ParentTagChildTags      ChildTagSlice      `boil:"ParentTagChildTags" json:"ParentTagChildTags" toml:"ParentTagChildTags" yaml:"ParentTagChildTags"`
	Documents               DocumentSlice      `boil:"Documents" json:"Documents" toml:"Documents" yaml:"Documents"`
	ChildTagTagParentPaths  TagParentPathSlice `boil:"ChildTagTagParentPaths" json:"ChildTagTagParentPaths" toml:"ChildTagTagParentPaths" yaml:"ChildTagTagParentPaths"`
	ParentTagTagParentPaths TagParentPathSlice `boil:"ParentTagTagParentPaths" json:"ParentTagTagParentPaths" toml:"ParentTagTagParentPaths" yaml:"ParentTagTagParentPaths"`
}

// NewStruct creates a new relationship struct
func (*tagR) NewStruct() *tagR {
	return &tagR{}
}

func (r *tagR) GetBookmarks() BookmarkSlice {
	if r == nil {
		return nil
	}
	return r.Bookmarks
}

func (r *tagR) GetChildTagChildTags() ChildTagSlice {
	if r == nil {
		return nil
	}
	return r.ChildTagChildTags
}

func (r *tagR) GetParentTagChildTags() ChildTagSlice {
	if r == nil {
		return nil
	}
	return r.ParentTagChildTags
}

func (r *tagR) GetDocuments() DocumentSlice {
	if r == nil {
		return nil
	}
	return r.Documents
}

func (r *tagR) GetChildTagTagParentPaths() TagParentPathSlice {
	if r == nil {
		return nil
	}
	return r.ChildTagTagParentPaths
}

func (r *tagR) GetParentTagTagParentPaths() TagParentPathSlice {
	if r == nil {
		return nil
	}
	return r.ParentTagTagParentPaths
}

// tagL is where Load methods for each relationship are stored.
type tagL struct{}

var (
	tagAllColumns            = []string{"id", "tag"}
	tagColumnsWithoutDefault = []string{"id", "tag"}
	tagColumnsWithDefault    = []string{}
	tagPrimaryKeyColumns     = []string{"id"}
	tagGeneratedColumns      = []string{}
)

type (
	// TagSlice is an alias for a slice of pointers to Tag.
	// This should almost always be used instead of []Tag.
	TagSlice []*Tag
	// TagHook is the signature for custom Tag hook methods
	TagHook func(context.Context, boil.ContextExecutor, *Tag) error

	tagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagType                 = reflect.TypeOf(&Tag{})
	tagMapping              = queries.MakeStructMapping(tagType)
	tagPrimaryKeyMapping, _ = queries.BindMapping(tagType, tagMapping, tagPrimaryKeyColumns)
	tagInsertCacheMut       sync.RWMutex
	tagInsertCache          = make(map[string]insertCache)
	tagUpdateCacheMut       sync.RWMutex
	tagUpdateCache          = make(map[string]updateCache)
	tagUpsertCacheMut       sync.RWMutex
	tagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tagAfterSelectHooks []TagHook

var tagBeforeInsertHooks []TagHook
var tagAfterInsertHooks []TagHook

var tagBeforeUpdateHooks []TagHook
var tagAfterUpdateHooks []TagHook

var tagBeforeDeleteHooks []TagHook
var tagAfterDeleteHooks []TagHook

var tagBeforeUpsertHooks []TagHook
var tagAfterUpsertHooks []TagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTagHook registers your hook function for all future operations.
func AddTagHook(hookPoint boil.HookPoint, tagHook TagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tagAfterSelectHooks = append(tagAfterSelectHooks, tagHook)
	case boil.BeforeInsertHook:
		tagBeforeInsertHooks = append(tagBeforeInsertHooks, tagHook)
	case boil.AfterInsertHook:
		tagAfterInsertHooks = append(tagAfterInsertHooks, tagHook)
	case boil.BeforeUpdateHook:
		tagBeforeUpdateHooks = append(tagBeforeUpdateHooks, tagHook)
	case boil.AfterUpdateHook:
		tagAfterUpdateHooks = append(tagAfterUpdateHooks, tagHook)
	case boil.BeforeDeleteHook:
		tagBeforeDeleteHooks = append(tagBeforeDeleteHooks, tagHook)
	case boil.AfterDeleteHook:
		tagAfterDeleteHooks = append(tagAfterDeleteHooks, tagHook)
	case boil.BeforeUpsertHook:
		tagBeforeUpsertHooks = append(tagBeforeUpsertHooks, tagHook)
	case boil.AfterUpsertHook:
		tagAfterUpsertHooks = append(tagAfterUpsertHooks, tagHook)
	}
}

// One returns a single tag record from the query.
func (q tagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tag, error) {
	o := &Tag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tags")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tag records from the query.
func (q tagQuery) All(ctx context.Context, exec boil.ContextExecutor) (TagSlice, error) {
	var o []*Tag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tag slice")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tag records in the query.
func (q tagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tags rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tags exists")
	}

	return count > 0, nil
}

// Bookmarks retrieves all the bookmark's Bookmarks with an executor.
func (o *Tag) Bookmarks(mods ...qm.QueryMod) bookmarkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("[dbo].[bookmark_contexts] on [dbo].[bookmarks].[id] = [dbo].[bookmark_contexts].[bookmark_id]"),
		qm.Where("[dbo].[bookmark_contexts].[tag_id]=?", o.ID),
	)

	return Bookmarks(queryMods...)
}

// ChildTagChildTags retrieves all the child_tag's ChildTags with an executor via child_tag_id column.
func (o *Tag) ChildTagChildTags(mods ...qm.QueryMod) childTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[child_tags].[child_tag_id]=?", o.ID),
	)

	return ChildTags(queryMods...)
}

// ParentTagChildTags retrieves all the child_tag's ChildTags with an executor via parent_tag_id column.
func (o *Tag) ParentTagChildTags(mods ...qm.QueryMod) childTagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[child_tags].[parent_tag_id]=?", o.ID),
	)

	return ChildTags(queryMods...)
}

// Documents retrieves all the document's Documents with an executor.
func (o *Tag) Documents(mods ...qm.QueryMod) documentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("[dbo].[document_contexts] on [dbo].[documents].[id] = [dbo].[document_contexts].[document_id]"),
		qm.Where("[dbo].[document_contexts].[tag_id]=?", o.ID),
	)

	return Documents(queryMods...)
}

// ChildTagTagParentPaths retrieves all the tag_parent_path's TagParentPaths with an executor via child_tag_id column.
func (o *Tag) ChildTagTagParentPaths(mods ...qm.QueryMod) tagParentPathQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[tag_parent_paths].[child_tag_id]=?", o.ID),
	)

	return TagParentPaths(queryMods...)
}

// ParentTagTagParentPaths retrieves all the tag_parent_path's TagParentPaths with an executor via parent_tag_id column.
func (o *Tag) ParentTagTagParentPaths(mods ...qm.QueryMod) tagParentPathQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("[dbo].[tag_parent_paths].[parent_tag_id]=?", o.ID),
	)

	return TagParentPaths(queryMods...)
}

// LoadBookmarks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadBookmarks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("[dbo].[bookmarks].[id], [dbo].[bookmarks].[is_read], [dbo].[bookmarks].[title], [dbo].[bookmarks].[url], [dbo].[bookmarks].[bookmark_type_id], [dbo].[bookmarks].[is_collection], [dbo].[bookmarks].[created_at], [dbo].[bookmarks].[updated_at], [dbo].[bookmarks].[deleted_at], [a].[tag_id]"),
		qm.From("[dbo].[bookmarks]"),
		qm.InnerJoin("[dbo].[bookmark_contexts] as [a] on [dbo].[bookmarks].[id] = [a].[bookmark_id]"),
		qm.WhereIn("[a].[tag_id] in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bookmarks")
	}

	var resultSlice []*Bookmark

	var localJoinCols []int
	for results.Next() {
		one := new(Bookmark)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.IsRead, &one.Title, &one.URL, &one.BookmarkTypeID, &one.IsCollection, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for bookmarks")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice bookmarks")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bookmarks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bookmarks")
	}

	if len(bookmarkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Bookmarks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bookmarkR{}
			}
			foreign.R.Tags = append(foreign.R.Tags, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Bookmarks = append(local.R.Bookmarks, foreign)
				if foreign.R == nil {
					foreign.R = &bookmarkR{}
				}
				foreign.R.Tags = append(foreign.R.Tags, local)
				break
			}
		}
	}

	return nil
}

// LoadChildTagChildTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadChildTagChildTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.child_tags`),
		qm.WhereIn(`dbo.child_tags.child_tag_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load child_tags")
	}

	var resultSlice []*ChildTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice child_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on child_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for child_tags")
	}

	if len(childTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildTagChildTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &childTagR{}
			}
			foreign.R.ChildTag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ChildTagID) {
				local.R.ChildTagChildTags = append(local.R.ChildTagChildTags, foreign)
				if foreign.R == nil {
					foreign.R = &childTagR{}
				}
				foreign.R.ChildTag = local
				break
			}
		}
	}

	return nil
}

// LoadParentTagChildTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadParentTagChildTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.child_tags`),
		qm.WhereIn(`dbo.child_tags.parent_tag_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load child_tags")
	}

	var resultSlice []*ChildTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice child_tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on child_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for child_tags")
	}

	if len(childTagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentTagChildTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &childTagR{}
			}
			foreign.R.ParentTag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentTagID) {
				local.R.ParentTagChildTags = append(local.R.ParentTagChildTags, foreign)
				if foreign.R == nil {
					foreign.R = &childTagR{}
				}
				foreign.R.ParentTag = local
				break
			}
		}
	}

	return nil
}

// LoadDocuments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadDocuments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("[dbo].[documents].[id], [dbo].[documents].[path], [dbo].[documents].[document_type_id], [dbo].[documents].[created_at], [dbo].[documents].[updated_at], [dbo].[documents].[deleted_at], [a].[tag_id]"),
		qm.From("[dbo].[documents]"),
		qm.InnerJoin("[dbo].[document_contexts] as [a] on [dbo].[documents].[id] = [a].[document_id]"),
		qm.WhereIn("[a].[tag_id] in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load documents")
	}

	var resultSlice []*Document

	var localJoinCols []int
	for results.Next() {
		one := new(Document)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Path, &one.DocumentTypeID, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for documents")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice documents")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on documents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for documents")
	}

	if len(documentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Documents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &documentR{}
			}
			foreign.R.Tags = append(foreign.R.Tags, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Documents = append(local.R.Documents, foreign)
				if foreign.R == nil {
					foreign.R = &documentR{}
				}
				foreign.R.Tags = append(foreign.R.Tags, local)
				break
			}
		}
	}

	return nil
}

// LoadChildTagTagParentPaths allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadChildTagTagParentPaths(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.tag_parent_paths`),
		qm.WhereIn(`dbo.tag_parent_paths.child_tag_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag_parent_paths")
	}

	var resultSlice []*TagParentPath
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tag_parent_paths")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tag_parent_paths")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag_parent_paths")
	}

	if len(tagParentPathAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildTagTagParentPaths = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagParentPathR{}
			}
			foreign.R.ChildTag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ChildTagID) {
				local.R.ChildTagTagParentPaths = append(local.R.ChildTagTagParentPaths, foreign)
				if foreign.R == nil {
					foreign.R = &tagParentPathR{}
				}
				foreign.R.ChildTag = local
				break
			}
		}
	}

	return nil
}

// LoadParentTagTagParentPaths allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tagL) LoadParentTagTagParentPaths(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTag interface{}, mods queries.Applicator) error {
	var slice []*Tag
	var object *Tag

	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*[]*Tag)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dbo.tag_parent_paths`),
		qm.WhereIn(`dbo.tag_parent_paths.parent_tag_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag_parent_paths")
	}

	var resultSlice []*TagParentPath
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tag_parent_paths")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tag_parent_paths")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tag_parent_paths")
	}

	if len(tagParentPathAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentTagTagParentPaths = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagParentPathR{}
			}
			foreign.R.ParentTag = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentTagID) {
				local.R.ParentTagTagParentPaths = append(local.R.ParentTagTagParentPaths, foreign)
				if foreign.R == nil {
					foreign.R = &tagParentPathR{}
				}
				foreign.R.ParentTag = local
				break
			}
		}
	}

	return nil
}

// AddBookmarks adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Bookmarks.
// Sets related.R.Tags appropriately.
func (o *Tag) AddBookmarks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookmark) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into [dbo].[bookmark_contexts] ([tag_id], [bookmark_id]) values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &tagR{
			Bookmarks: related,
		}
	} else {
		o.R.Bookmarks = append(o.R.Bookmarks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bookmarkR{
				Tags: TagSlice{o},
			}
		} else {
			rel.R.Tags = append(rel.R.Tags, o)
		}
	}
	return nil
}

// SetBookmarks removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tags's Bookmarks accordingly.
// Replaces o.R.Bookmarks with related.
// Sets related.R.Tags's Bookmarks accordingly.
func (o *Tag) SetBookmarks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bookmark) error {
	query := "delete from [dbo].[bookmark_contexts] where [tag_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeBookmarksFromTagsSlice(o, related)
	if o.R != nil {
		o.R.Bookmarks = nil
	}

	return o.AddBookmarks(ctx, exec, insert, related...)
}

// RemoveBookmarks relationships from objects passed in.
// Removes related items from R.Bookmarks (uses pointer comparison, removal does not keep order)
// Sets related.R.Tags.
func (o *Tag) RemoveBookmarks(ctx context.Context, exec boil.ContextExecutor, related ...*Bookmark) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from [dbo].[bookmark_contexts] where [tag_id] = $1 and [bookmark_id] in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeBookmarksFromTagsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Bookmarks {
			if rel != ri {
				continue
			}

			ln := len(o.R.Bookmarks)
			if ln > 1 && i < ln-1 {
				o.R.Bookmarks[i] = o.R.Bookmarks[ln-1]
			}
			o.R.Bookmarks = o.R.Bookmarks[:ln-1]
			break
		}
	}

	return nil
}

func removeBookmarksFromTagsSlice(o *Tag, related []*Bookmark) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Tags {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Tags)
			if ln > 1 && i < ln-1 {
				rel.R.Tags[i] = rel.R.Tags[ln-1]
			}
			rel.R.Tags = rel.R.Tags[:ln-1]
			break
		}
	}
}

// AddChildTagChildTags adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ChildTagChildTags.
// Sets related.R.ChildTag appropriately.
func (o *Tag) AddChildTagChildTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChildTag) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChildTagID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[child_tags] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"child_tag_id"}),
				strmangle.WhereClause("[", "]", 2, childTagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChildTagID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tagR{
			ChildTagChildTags: related,
		}
	} else {
		o.R.ChildTagChildTags = append(o.R.ChildTagChildTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &childTagR{
				ChildTag: o,
			}
		} else {
			rel.R.ChildTag = o
		}
	}
	return nil
}

// SetChildTagChildTags removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChildTag's ChildTagChildTags accordingly.
// Replaces o.R.ChildTagChildTags with related.
// Sets related.R.ChildTag's ChildTagChildTags accordingly.
func (o *Tag) SetChildTagChildTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChildTag) error {
	query := "update [dbo].[child_tags] set [child_tag_id] = null where [child_tag_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChildTagChildTags {
			queries.SetScanner(&rel.ChildTagID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChildTag = nil
		}
		o.R.ChildTagChildTags = nil
	}

	return o.AddChildTagChildTags(ctx, exec, insert, related...)
}

// RemoveChildTagChildTags relationships from objects passed in.
// Removes related items from R.ChildTagChildTags (uses pointer comparison, removal does not keep order)
// Sets related.R.ChildTag.
func (o *Tag) RemoveChildTagChildTags(ctx context.Context, exec boil.ContextExecutor, related ...*ChildTag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChildTagID, nil)
		if rel.R != nil {
			rel.R.ChildTag = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("child_tag_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildTagChildTags {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildTagChildTags)
			if ln > 1 && i < ln-1 {
				o.R.ChildTagChildTags[i] = o.R.ChildTagChildTags[ln-1]
			}
			o.R.ChildTagChildTags = o.R.ChildTagChildTags[:ln-1]
			break
		}
	}

	return nil
}

// AddParentTagChildTags adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ParentTagChildTags.
// Sets related.R.ParentTag appropriately.
func (o *Tag) AddParentTagChildTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChildTag) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentTagID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[child_tags] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"parent_tag_id"}),
				strmangle.WhereClause("[", "]", 2, childTagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentTagID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tagR{
			ParentTagChildTags: related,
		}
	} else {
		o.R.ParentTagChildTags = append(o.R.ParentTagChildTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &childTagR{
				ParentTag: o,
			}
		} else {
			rel.R.ParentTag = o
		}
	}
	return nil
}

// SetParentTagChildTags removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTag's ParentTagChildTags accordingly.
// Replaces o.R.ParentTagChildTags with related.
// Sets related.R.ParentTag's ParentTagChildTags accordingly.
func (o *Tag) SetParentTagChildTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ChildTag) error {
	query := "update [dbo].[child_tags] set [parent_tag_id] = null where [parent_tag_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentTagChildTags {
			queries.SetScanner(&rel.ParentTagID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentTag = nil
		}
		o.R.ParentTagChildTags = nil
	}

	return o.AddParentTagChildTags(ctx, exec, insert, related...)
}

// RemoveParentTagChildTags relationships from objects passed in.
// Removes related items from R.ParentTagChildTags (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTag.
func (o *Tag) RemoveParentTagChildTags(ctx context.Context, exec boil.ContextExecutor, related ...*ChildTag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentTagID, nil)
		if rel.R != nil {
			rel.R.ParentTag = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_tag_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentTagChildTags {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentTagChildTags)
			if ln > 1 && i < ln-1 {
				o.R.ParentTagChildTags[i] = o.R.ParentTagChildTags[ln-1]
			}
			o.R.ParentTagChildTags = o.R.ParentTagChildTags[:ln-1]
			break
		}
	}

	return nil
}

// AddDocuments adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Documents.
// Sets related.R.Tags appropriately.
func (o *Tag) AddDocuments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Document) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into [dbo].[document_contexts] ([tag_id], [document_id]) values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &tagR{
			Documents: related,
		}
	} else {
		o.R.Documents = append(o.R.Documents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &documentR{
				Tags: TagSlice{o},
			}
		} else {
			rel.R.Tags = append(rel.R.Tags, o)
		}
	}
	return nil
}

// SetDocuments removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tags's Documents accordingly.
// Replaces o.R.Documents with related.
// Sets related.R.Tags's Documents accordingly.
func (o *Tag) SetDocuments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Document) error {
	query := "delete from [dbo].[document_contexts] where [tag_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeDocumentsFromTagsSlice(o, related)
	if o.R != nil {
		o.R.Documents = nil
	}

	return o.AddDocuments(ctx, exec, insert, related...)
}

// RemoveDocuments relationships from objects passed in.
// Removes related items from R.Documents (uses pointer comparison, removal does not keep order)
// Sets related.R.Tags.
func (o *Tag) RemoveDocuments(ctx context.Context, exec boil.ContextExecutor, related ...*Document) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from [dbo].[document_contexts] where [tag_id] = $1 and [document_id] in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeDocumentsFromTagsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Documents {
			if rel != ri {
				continue
			}

			ln := len(o.R.Documents)
			if ln > 1 && i < ln-1 {
				o.R.Documents[i] = o.R.Documents[ln-1]
			}
			o.R.Documents = o.R.Documents[:ln-1]
			break
		}
	}

	return nil
}

func removeDocumentsFromTagsSlice(o *Tag, related []*Document) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Tags {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Tags)
			if ln > 1 && i < ln-1 {
				rel.R.Tags[i] = rel.R.Tags[ln-1]
			}
			rel.R.Tags = rel.R.Tags[:ln-1]
			break
		}
	}
}

// AddChildTagTagParentPaths adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ChildTagTagParentPaths.
// Sets related.R.ChildTag appropriately.
func (o *Tag) AddChildTagTagParentPaths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TagParentPath) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ChildTagID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[tag_parent_paths] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"child_tag_id"}),
				strmangle.WhereClause("[", "]", 2, tagParentPathPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ChildTagID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tagR{
			ChildTagTagParentPaths: related,
		}
	} else {
		o.R.ChildTagTagParentPaths = append(o.R.ChildTagTagParentPaths, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagParentPathR{
				ChildTag: o,
			}
		} else {
			rel.R.ChildTag = o
		}
	}
	return nil
}

// SetChildTagTagParentPaths removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChildTag's ChildTagTagParentPaths accordingly.
// Replaces o.R.ChildTagTagParentPaths with related.
// Sets related.R.ChildTag's ChildTagTagParentPaths accordingly.
func (o *Tag) SetChildTagTagParentPaths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TagParentPath) error {
	query := "update [dbo].[tag_parent_paths] set [child_tag_id] = null where [child_tag_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChildTagTagParentPaths {
			queries.SetScanner(&rel.ChildTagID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChildTag = nil
		}
		o.R.ChildTagTagParentPaths = nil
	}

	return o.AddChildTagTagParentPaths(ctx, exec, insert, related...)
}

// RemoveChildTagTagParentPaths relationships from objects passed in.
// Removes related items from R.ChildTagTagParentPaths (uses pointer comparison, removal does not keep order)
// Sets related.R.ChildTag.
func (o *Tag) RemoveChildTagTagParentPaths(ctx context.Context, exec boil.ContextExecutor, related ...*TagParentPath) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ChildTagID, nil)
		if rel.R != nil {
			rel.R.ChildTag = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("child_tag_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildTagTagParentPaths {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildTagTagParentPaths)
			if ln > 1 && i < ln-1 {
				o.R.ChildTagTagParentPaths[i] = o.R.ChildTagTagParentPaths[ln-1]
			}
			o.R.ChildTagTagParentPaths = o.R.ChildTagTagParentPaths[:ln-1]
			break
		}
	}

	return nil
}

// AddParentTagTagParentPaths adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.ParentTagTagParentPaths.
// Sets related.R.ParentTag appropriately.
func (o *Tag) AddParentTagTagParentPaths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TagParentPath) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentTagID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE [dbo].[tag_parent_paths] SET %s WHERE %s",
				strmangle.SetParamNames("[", "]", 1, []string{"parent_tag_id"}),
				strmangle.WhereClause("[", "]", 2, tagParentPathPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentTagID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tagR{
			ParentTagTagParentPaths: related,
		}
	} else {
		o.R.ParentTagTagParentPaths = append(o.R.ParentTagTagParentPaths, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagParentPathR{
				ParentTag: o,
			}
		} else {
			rel.R.ParentTag = o
		}
	}
	return nil
}

// SetParentTagTagParentPaths removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTag's ParentTagTagParentPaths accordingly.
// Replaces o.R.ParentTagTagParentPaths with related.
// Sets related.R.ParentTag's ParentTagTagParentPaths accordingly.
func (o *Tag) SetParentTagTagParentPaths(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TagParentPath) error {
	query := "update [dbo].[tag_parent_paths] set [parent_tag_id] = null where [parent_tag_id] = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentTagTagParentPaths {
			queries.SetScanner(&rel.ParentTagID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentTag = nil
		}
		o.R.ParentTagTagParentPaths = nil
	}

	return o.AddParentTagTagParentPaths(ctx, exec, insert, related...)
}

// RemoveParentTagTagParentPaths relationships from objects passed in.
// Removes related items from R.ParentTagTagParentPaths (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTag.
func (o *Tag) RemoveParentTagTagParentPaths(ctx context.Context, exec boil.ContextExecutor, related ...*TagParentPath) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentTagID, nil)
		if rel.R != nil {
			rel.R.ParentTag = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parent_tag_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentTagTagParentPaths {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentTagTagParentPaths)
			if ln > 1 && i < ln-1 {
				o.R.ParentTagTagParentPaths[i] = o.R.ParentTagTagParentPaths[ln-1]
			}
			o.R.ParentTagTagParentPaths = o.R.ParentTagTagParentPaths[:ln-1]
			break
		}
	}

	return nil
}

// Tags retrieves all the records using an executor.
func Tags(mods ...qm.QueryMod) tagQuery {
	mods = append(mods, qm.From("[dbo].[tags]"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"[dbo].[tags].*"})
	}

	return tagQuery{q}
}

// FindTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTag(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Tag, error) {
	tagObj := &Tag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from [dbo].[tags] where [id]=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tagObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tags")
	}

	if err = tagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tagObj, err
	}

	return tagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tags provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tagInsertCacheMut.RLock()
	cache, cached := tagInsertCache[key]
	tagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tagAllColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tagType, tagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO [dbo].[tags] ([%s]) %%sVALUES (%s)%%s", strings.Join(wl, "],["), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO [dbo].[tags] %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryOutput = fmt.Sprintf("OUTPUT INSERTED.[%s] ", strings.Join(returnColumns, "],INSERTED.["))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tags")
	}

	if !cached {
		tagInsertCacheMut.Lock()
		tagInsertCache[key] = cache
		tagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tagUpdateCacheMut.RLock()
	cache, cached := tagUpdateCache[key]
	tagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tagAllColumns,
			tagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tags, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE [dbo].[tags] SET %s WHERE %s",
			strmangle.SetParamNames("[", "]", 1, wl),
			strmangle.WhereClause("[", "]", len(wl)+1, tagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, append(wl, tagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tags row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tags")
	}

	if !cached {
		tagUpdateCacheMut.Lock()
		tagUpdateCache[key] = cache
		tagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tags")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE [dbo].[tags] SET %s WHERE %s",
		strmangle.SetParamNames("[", "]", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Tag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tags provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tagUpsertCacheMut.RLock()
	cache, cached := tagUpsertCache[key]
	tagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tagAllColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
		)

		for i, v := range insert {
			if strmangle.ContainsAny(tagPrimaryKeyColumns, v) && strmangle.ContainsAny(tagColumnsWithDefault, v) {
				insert = append(insert[:i], insert[i+1:]...)
			}
		}
		if len(insert) == 0 {
			return errors.New("models: unable to upsert tags, could not build insert column list")
		}

		update := updateColumns.UpdateColumnSet(
			tagAllColumns,
			tagPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tags, could not build update column list")
		}

		cache.query = buildUpsertQueryMSSQL(dialect, "[dbo].[tags]", tagPrimaryKeyColumns, update, insert, ret)

		whitelist := make([]string, len(tagPrimaryKeyColumns))
		copy(whitelist, tagPrimaryKeyColumns)
		whitelist = append(whitelist, update...)
		whitelist = append(whitelist, insert...)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tagType, tagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // MSSQL doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tags")
	}

	if !cached {
		tagUpsertCacheMut.Lock()
		tagUpsertCache[key] = cache
		tagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tagPrimaryKeyMapping)
	sql := "DELETE FROM [dbo].[tags] WHERE [id]=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tags")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tags")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tags")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM [dbo].[tags] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tags")
	}

	if len(tagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT [dbo].[tags].* FROM [dbo].[tags] WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TagSlice")
	}

	*o = slice

	return nil
}

// TagExists checks if the Tag row exists.
func TagExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select case when exists(select top(1) 1 from [dbo].[tags] where [id]=$1) then 1 else 0 end"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tags exists")
	}

	return exists, nil
}
