// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDocumentContexts(t *testing.T) {
	

	query := DocumentContexts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDocumentContextsDelete(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentContextsQueryDeleteAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DocumentContexts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentContextsSliceDeleteAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocumentContextSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentContextsExists(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DocumentContextExists(ctx, tx, o.TagID, o.DocumentID)
	if err != nil {
		t.Errorf("Unable to check if DocumentContext exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DocumentContextExists to return true, but got false.")
	}
}

func testDocumentContextsFind(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	documentContextFound, err := FindDocumentContext(ctx, tx, o.TagID, o.DocumentID)
	if err != nil {
		t.Error(err)
	}

	if documentContextFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDocumentContextsBind(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DocumentContexts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDocumentContextsOne(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DocumentContexts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDocumentContextsAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	documentContextOne := &DocumentContext{}
	documentContextTwo := &DocumentContext{}
	if err = randomize.Struct(seed, documentContextOne, documentContextDBTypes, false, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}
	if err = randomize.Struct(seed, documentContextTwo, documentContextDBTypes, false, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = documentContextOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = documentContextTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DocumentContexts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDocumentContextsCount(t *testing.T) {
	

	var err error
	seed := randomize.NewSeed()
	documentContextOne := &DocumentContext{}
	documentContextTwo := &DocumentContext{}
	if err = randomize.Struct(seed, documentContextOne, documentContextDBTypes, false, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}
	if err = randomize.Struct(seed, documentContextTwo, documentContextDBTypes, false, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = documentContextOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = documentContextTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func documentContextBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func documentContextAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DocumentContext) error {
	*o = DocumentContext{}
	return nil
}

func testDocumentContextsHooks(t *testing.T) {
	

	var err error

	ctx := context.Background()
	empty := &DocumentContext{}
	o := &DocumentContext{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, documentContextDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DocumentContext object: %s", err)
	}

	AddDocumentContextHook(boil.BeforeInsertHook, documentContextBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	documentContextBeforeInsertHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.AfterInsertHook, documentContextAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	documentContextAfterInsertHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.AfterSelectHook, documentContextAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	documentContextAfterSelectHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.BeforeUpdateHook, documentContextBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	documentContextBeforeUpdateHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.AfterUpdateHook, documentContextAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	documentContextAfterUpdateHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.BeforeDeleteHook, documentContextBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	documentContextBeforeDeleteHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.AfterDeleteHook, documentContextAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	documentContextAfterDeleteHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.BeforeUpsertHook, documentContextBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	documentContextBeforeUpsertHooks = []DocumentContextHook{}

	AddDocumentContextHook(boil.AfterUpsertHook, documentContextAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	documentContextAfterUpsertHooks = []DocumentContextHook{}
}

func testDocumentContextsInsert(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocumentContextsInsertWhitelist(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(documentContextColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocumentContextsReload(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocumentContextsReloadAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocumentContextSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocumentContextsSelect(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DocumentContexts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	documentContextDBTypes = map[string]string{`DocumentID`: `int`, `TagID`: `int`}
	_                      = bytes.MinRead
)

func testDocumentContextsUpdate(t *testing.T) {
	

	if 0 == len(documentContextPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(documentContextAllColumns) == len(documentContextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDocumentContextsSliceUpdateAll(t *testing.T) {
	

	if len(documentContextAllColumns) == len(documentContextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DocumentContext{}
	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, documentContextDBTypes, true, documentContextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(documentContextAllColumns, documentContextPrimaryKeyColumns) {
		fields = documentContextAllColumns
	} else {
		fields = strmangle.SetComplement(
			documentContextAllColumns,
			documentContextPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DocumentContextSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDocumentContextsUpsert(t *testing.T) {
	

	if len(documentContextAllColumns) == len(documentContextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDocumentContextUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DocumentContext{}
	if err = randomize.Struct(seed, &o, documentContextDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DocumentContext: %s", err)
	}

	count, err := DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, documentContextDBTypes, false, documentContextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DocumentContext struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DocumentContext: %s", err)
	}

	count, err = DocumentContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
