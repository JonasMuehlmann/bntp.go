// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContexts)
	t.Run("BookmarkTypes", testBookmarkTypes)
	t.Run("Bookmarks", testBookmarks)
	t.Run("DocumentContexts", testDocumentContexts)
	t.Run("DocumentTypes", testDocumentTypes)
	t.Run("Documents", testDocuments)
	t.Run("Links", testLinks)
	t.Run("Tags", testTags)
}

func TestDelete(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsDelete)
	t.Run("BookmarkTypes", testBookmarkTypesDelete)
	t.Run("Bookmarks", testBookmarksDelete)
	t.Run("DocumentContexts", testDocumentContextsDelete)
	t.Run("DocumentTypes", testDocumentTypesDelete)
	t.Run("Documents", testDocumentsDelete)
	t.Run("Links", testLinksDelete)
	t.Run("Tags", testTagsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsQueryDeleteAll)
	t.Run("BookmarkTypes", testBookmarkTypesQueryDeleteAll)
	t.Run("Bookmarks", testBookmarksQueryDeleteAll)
	t.Run("DocumentContexts", testDocumentContextsQueryDeleteAll)
	t.Run("DocumentTypes", testDocumentTypesQueryDeleteAll)
	t.Run("Documents", testDocumentsQueryDeleteAll)
	t.Run("Links", testLinksQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsSliceDeleteAll)
	t.Run("BookmarkTypes", testBookmarkTypesSliceDeleteAll)
	t.Run("Bookmarks", testBookmarksSliceDeleteAll)
	t.Run("DocumentContexts", testDocumentContextsSliceDeleteAll)
	t.Run("DocumentTypes", testDocumentTypesSliceDeleteAll)
	t.Run("Documents", testDocumentsSliceDeleteAll)
	t.Run("Links", testLinksSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsExists)
	t.Run("BookmarkTypes", testBookmarkTypesExists)
	t.Run("Bookmarks", testBookmarksExists)
	t.Run("DocumentContexts", testDocumentContextsExists)
	t.Run("DocumentTypes", testDocumentTypesExists)
	t.Run("Documents", testDocumentsExists)
	t.Run("Links", testLinksExists)
	t.Run("Tags", testTagsExists)
}

func TestFind(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsFind)
	t.Run("BookmarkTypes", testBookmarkTypesFind)
	t.Run("Bookmarks", testBookmarksFind)
	t.Run("DocumentContexts", testDocumentContextsFind)
	t.Run("DocumentTypes", testDocumentTypesFind)
	t.Run("Documents", testDocumentsFind)
	t.Run("Links", testLinksFind)
	t.Run("Tags", testTagsFind)
}

func TestBind(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsBind)
	t.Run("BookmarkTypes", testBookmarkTypesBind)
	t.Run("Bookmarks", testBookmarksBind)
	t.Run("DocumentContexts", testDocumentContextsBind)
	t.Run("DocumentTypes", testDocumentTypesBind)
	t.Run("Documents", testDocumentsBind)
	t.Run("Links", testLinksBind)
	t.Run("Tags", testTagsBind)
}

func TestOne(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsOne)
	t.Run("BookmarkTypes", testBookmarkTypesOne)
	t.Run("Bookmarks", testBookmarksOne)
	t.Run("DocumentContexts", testDocumentContextsOne)
	t.Run("DocumentTypes", testDocumentTypesOne)
	t.Run("Documents", testDocumentsOne)
	t.Run("Links", testLinksOne)
	t.Run("Tags", testTagsOne)
}

func TestAll(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsAll)
	t.Run("BookmarkTypes", testBookmarkTypesAll)
	t.Run("Bookmarks", testBookmarksAll)
	t.Run("DocumentContexts", testDocumentContextsAll)
	t.Run("DocumentTypes", testDocumentTypesAll)
	t.Run("Documents", testDocumentsAll)
	t.Run("Links", testLinksAll)
	t.Run("Tags", testTagsAll)
}

func TestCount(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsCount)
	t.Run("BookmarkTypes", testBookmarkTypesCount)
	t.Run("Bookmarks", testBookmarksCount)
	t.Run("DocumentContexts", testDocumentContextsCount)
	t.Run("DocumentTypes", testDocumentTypesCount)
	t.Run("Documents", testDocumentsCount)
	t.Run("Links", testLinksCount)
	t.Run("Tags", testTagsCount)
}

func TestHooks(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsHooks)
	t.Run("BookmarkTypes", testBookmarkTypesHooks)
	t.Run("Bookmarks", testBookmarksHooks)
	t.Run("DocumentContexts", testDocumentContextsHooks)
	t.Run("DocumentTypes", testDocumentTypesHooks)
	t.Run("Documents", testDocumentsHooks)
	t.Run("Links", testLinksHooks)
	t.Run("Tags", testTagsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsInsert)
	t.Run("BookmarkContexts", testBookmarkContextsInsertWhitelist)
	t.Run("BookmarkTypes", testBookmarkTypesInsert)
	t.Run("BookmarkTypes", testBookmarkTypesInsertWhitelist)
	t.Run("Bookmarks", testBookmarksInsert)
	t.Run("Bookmarks", testBookmarksInsertWhitelist)
	t.Run("DocumentContexts", testDocumentContextsInsert)
	t.Run("DocumentContexts", testDocumentContextsInsertWhitelist)
	t.Run("DocumentTypes", testDocumentTypesInsert)
	t.Run("DocumentTypes", testDocumentTypesInsertWhitelist)
	t.Run("Documents", testDocumentsInsert)
	t.Run("Documents", testDocumentsInsertWhitelist)
	t.Run("Links", testLinksInsert)
	t.Run("Links", testLinksInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsReload)
	t.Run("BookmarkTypes", testBookmarkTypesReload)
	t.Run("Bookmarks", testBookmarksReload)
	t.Run("DocumentContexts", testDocumentContextsReload)
	t.Run("DocumentTypes", testDocumentTypesReload)
	t.Run("Documents", testDocumentsReload)
	t.Run("Links", testLinksReload)
	t.Run("Tags", testTagsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsReloadAll)
	t.Run("BookmarkTypes", testBookmarkTypesReloadAll)
	t.Run("Bookmarks", testBookmarksReloadAll)
	t.Run("DocumentContexts", testDocumentContextsReloadAll)
	t.Run("DocumentTypes", testDocumentTypesReloadAll)
	t.Run("Documents", testDocumentsReloadAll)
	t.Run("Links", testLinksReloadAll)
	t.Run("Tags", testTagsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsSelect)
	t.Run("BookmarkTypes", testBookmarkTypesSelect)
	t.Run("Bookmarks", testBookmarksSelect)
	t.Run("DocumentContexts", testDocumentContextsSelect)
	t.Run("DocumentTypes", testDocumentTypesSelect)
	t.Run("Documents", testDocumentsSelect)
	t.Run("Links", testLinksSelect)
	t.Run("Tags", testTagsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsUpdate)
	t.Run("BookmarkTypes", testBookmarkTypesUpdate)
	t.Run("Bookmarks", testBookmarksUpdate)
	t.Run("DocumentContexts", testDocumentContextsUpdate)
	t.Run("DocumentTypes", testDocumentTypesUpdate)
	t.Run("Documents", testDocumentsUpdate)
	t.Run("Links", testLinksUpdate)
	t.Run("Tags", testTagsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("BookmarkContexts", testBookmarkContextsSliceUpdateAll)
	t.Run("BookmarkTypes", testBookmarkTypesSliceUpdateAll)
	t.Run("Bookmarks", testBookmarksSliceUpdateAll)
	t.Run("DocumentContexts", testDocumentContextsSliceUpdateAll)
	t.Run("DocumentTypes", testDocumentTypesSliceUpdateAll)
	t.Run("Documents", testDocumentsSliceUpdateAll)
	t.Run("Links", testLinksSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
}
