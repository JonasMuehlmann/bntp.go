// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBookmarkContexts(t *testing.T) {
	

	query := BookmarkContexts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBookmarkContextsDelete(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkContextsQueryDeleteAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BookmarkContexts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkContextsSliceDeleteAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkContextSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBookmarkContextsExists(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BookmarkContextExists(ctx, tx, o.TagID, o.BookmarkID)
	if err != nil {
		t.Errorf("Unable to check if BookmarkContext exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BookmarkContextExists to return true, but got false.")
	}
}

func testBookmarkContextsFind(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bookmarkContextFound, err := FindBookmarkContext(ctx, tx, o.TagID, o.BookmarkID)
	if err != nil {
		t.Error(err)
	}

	if bookmarkContextFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBookmarkContextsBind(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BookmarkContexts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBookmarkContextsOne(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BookmarkContexts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBookmarkContextsAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	bookmarkContextOne := &BookmarkContext{}
	bookmarkContextTwo := &BookmarkContext{}
	if err = randomize.Struct(seed, bookmarkContextOne, bookmarkContextDBTypes, false, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkContextTwo, bookmarkContextDBTypes, false, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkContextOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkContextTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkContexts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBookmarkContextsCount(t *testing.T) {
	

	var err error
	seed := randomize.NewSeed()
	bookmarkContextOne := &BookmarkContext{}
	bookmarkContextTwo := &BookmarkContext{}
	if err = randomize.Struct(seed, bookmarkContextOne, bookmarkContextDBTypes, false, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}
	if err = randomize.Struct(seed, bookmarkContextTwo, bookmarkContextDBTypes, false, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bookmarkContextOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bookmarkContextTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bookmarkContextBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func bookmarkContextAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BookmarkContext) error {
	*o = BookmarkContext{}
	return nil
}

func testBookmarkContextsHooks(t *testing.T) {
	

	var err error

	ctx := context.Background()
	empty := &BookmarkContext{}
	o := &BookmarkContext{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookmarkContext object: %s", err)
	}

	AddBookmarkContextHook(boil.BeforeInsertHook, bookmarkContextBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkContextBeforeInsertHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.AfterInsertHook, bookmarkContextAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bookmarkContextAfterInsertHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.AfterSelectHook, bookmarkContextAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bookmarkContextAfterSelectHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.BeforeUpdateHook, bookmarkContextBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkContextBeforeUpdateHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.AfterUpdateHook, bookmarkContextAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bookmarkContextAfterUpdateHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.BeforeDeleteHook, bookmarkContextBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkContextBeforeDeleteHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.AfterDeleteHook, bookmarkContextAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bookmarkContextAfterDeleteHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.BeforeUpsertHook, bookmarkContextBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkContextBeforeUpsertHooks = []BookmarkContextHook{}

	AddBookmarkContextHook(boil.AfterUpsertHook, bookmarkContextAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bookmarkContextAfterUpsertHooks = []BookmarkContextHook{}
}

func testBookmarkContextsInsert(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkContextsInsertWhitelist(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bookmarkContextColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBookmarkContextsReload(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkContextsReloadAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BookmarkContextSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBookmarkContextsSelect(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BookmarkContexts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bookmarkContextDBTypes = map[string]string{`BookmarkID`: `int`, `TagID`: `int`}
	_                      = bytes.MinRead
)

func testBookmarkContextsUpdate(t *testing.T) {
	

	if 0 == len(bookmarkContextPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bookmarkContextAllColumns) == len(bookmarkContextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBookmarkContextsSliceUpdateAll(t *testing.T) {
	

	if len(bookmarkContextAllColumns) == len(bookmarkContextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BookmarkContext{}
	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bookmarkContextDBTypes, true, bookmarkContextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bookmarkContextAllColumns, bookmarkContextPrimaryKeyColumns) {
		fields = bookmarkContextAllColumns
	} else {
		fields = strmangle.SetComplement(
			bookmarkContextAllColumns,
			bookmarkContextPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BookmarkContextSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBookmarkContextsUpsert(t *testing.T) {
	

	if len(bookmarkContextAllColumns) == len(bookmarkContextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBookmarkContextUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BookmarkContext{}
	if err = randomize.Struct(seed, &o, bookmarkContextDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkContext: %s", err)
	}

	count, err := BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bookmarkContextDBTypes, false, bookmarkContextPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BookmarkContext struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BookmarkContext: %s", err)
	}

	count, err = BookmarkContexts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
