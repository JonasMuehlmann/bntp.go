// Code generated by SQLBoiler 4.10.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDocuments(t *testing.T) {
	

	query := Documents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDocumentsDelete(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentsQueryDeleteAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Documents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentsSliceDeleteAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocumentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDocumentsExists(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DocumentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Document exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DocumentExists to return true, but got false.")
	}
}

func testDocumentsFind(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	documentFound, err := FindDocument(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if documentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDocumentsBind(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Documents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDocumentsOne(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Documents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDocumentsAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	documentOne := &Document{}
	documentTwo := &Document{}
	if err = randomize.Struct(seed, documentOne, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}
	if err = randomize.Struct(seed, documentTwo, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = documentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = documentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Documents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDocumentsCount(t *testing.T) {
	

	var err error
	seed := randomize.NewSeed()
	documentOne := &Document{}
	documentTwo := &Document{}
	if err = randomize.Struct(seed, documentOne, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}
	if err = randomize.Struct(seed, documentTwo, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = documentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = documentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func documentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func documentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Document) error {
	*o = Document{}
	return nil
}

func testDocumentsHooks(t *testing.T) {
	

	var err error

	ctx := context.Background()
	empty := &Document{}
	o := &Document{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, documentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Document object: %s", err)
	}

	AddDocumentHook(boil.BeforeInsertHook, documentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	documentBeforeInsertHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterInsertHook, documentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	documentAfterInsertHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterSelectHook, documentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	documentAfterSelectHooks = []DocumentHook{}

	AddDocumentHook(boil.BeforeUpdateHook, documentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	documentBeforeUpdateHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterUpdateHook, documentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	documentAfterUpdateHooks = []DocumentHook{}

	AddDocumentHook(boil.BeforeDeleteHook, documentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	documentBeforeDeleteHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterDeleteHook, documentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	documentAfterDeleteHooks = []DocumentHook{}

	AddDocumentHook(boil.BeforeUpsertHook, documentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	documentBeforeUpsertHooks = []DocumentHook{}

	AddDocumentHook(boil.AfterUpsertHook, documentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	documentAfterUpsertHooks = []DocumentHook{}
}

func testDocumentsInsert(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocumentsInsertWhitelist(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(documentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDocumentToManyTags(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tagDBTypes, false, tagColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into [dbo].[document_contexts] ([document_id], [tag_id]) values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into [dbo].[document_contexts] ([document_id], [tag_id]) values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.Tags().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DocumentSlice{&a}
	if err = a.L.LoadTags(ctx, tx, false, (*[]*Document)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tags = nil
	if err = a.L.LoadTags(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tags); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDocumentToManySourceDocuments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into [dbo].[links] ([destination_id], [source_id]) values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into [dbo].[links] ([destination_id], [source_id]) values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.SourceDocuments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DocumentSlice{&a}
	if err = a.L.LoadSourceDocuments(ctx, tx, false, (*[]*Document)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SourceDocuments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SourceDocuments = nil
	if err = a.L.LoadSourceDocuments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SourceDocuments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDocumentToManyDestinationDocuments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into [dbo].[links] ([source_id], [destination_id]) values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into [dbo].[links] ([source_id], [destination_id]) values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	check, err := a.DestinationDocuments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DocumentSlice{&a}
	if err = a.L.LoadDestinationDocuments(ctx, tx, false, (*[]*Document)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationDocuments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DestinationDocuments = nil
	if err = a.L.LoadDestinationDocuments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationDocuments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDocumentToManyAddOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tag{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTags(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Documents[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Documents[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Tags[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tags[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tags().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDocumentToManySetOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTags(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTags(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Documents) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Documents) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Documents[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Documents[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Tags[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Tags[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDocumentToManyRemoveOpTags(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Tag

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tag{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagDBTypes, false, strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTags(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTags(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tags().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Documents) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Documents) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Documents[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Documents[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Tags) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Tags[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Tags[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDocumentToManyAddOpSourceDocuments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Document{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSourceDocuments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.DestinationDocuments[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.DestinationDocuments[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.SourceDocuments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SourceDocuments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SourceDocuments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDocumentToManySetOpSourceDocuments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSourceDocuments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SourceDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSourceDocuments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SourceDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.DestinationDocuments) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.DestinationDocuments) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.DestinationDocuments[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.DestinationDocuments[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.SourceDocuments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SourceDocuments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDocumentToManyRemoveOpSourceDocuments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSourceDocuments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SourceDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSourceDocuments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SourceDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.DestinationDocuments) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.DestinationDocuments) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.DestinationDocuments[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DestinationDocuments[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.SourceDocuments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SourceDocuments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SourceDocuments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDocumentToManyAddOpDestinationDocuments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Document{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDestinationDocuments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.SourceDocuments[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.SourceDocuments[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.DestinationDocuments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DestinationDocuments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DestinationDocuments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDocumentToManySetOpDestinationDocuments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDestinationDocuments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DestinationDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDestinationDocuments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DestinationDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.SourceDocuments) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.SourceDocuments) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.SourceDocuments[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.SourceDocuments[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.DestinationDocuments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DestinationDocuments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDocumentToManyRemoveOpDestinationDocuments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c, d, e Document

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Document{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDestinationDocuments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DestinationDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDestinationDocuments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DestinationDocuments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.SourceDocuments) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.SourceDocuments) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.SourceDocuments[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SourceDocuments[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.DestinationDocuments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DestinationDocuments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DestinationDocuments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDocumentToOneDocumentTypeUsingDocumentType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Document
	var foreign DocumentType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, documentDBTypes, false, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, documentTypeDBTypes, false, documentTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DocumentType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DocumentTypeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DocumentType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DocumentSlice{&local}
	if err = local.L.LoadDocumentType(ctx, tx, false, (*[]*Document)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DocumentType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DocumentType = nil
	if err = local.L.LoadDocumentType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DocumentType == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDocumentToOneSetOpDocumentTypeUsingDocumentType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Document
	var b, c DocumentType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, documentDBTypes, false, strmangle.SetComplement(documentPrimaryKeyColumns, documentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, documentTypeDBTypes, false, strmangle.SetComplement(documentTypePrimaryKeyColumns, documentTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, documentTypeDBTypes, false, strmangle.SetComplement(documentTypePrimaryKeyColumns, documentTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DocumentType{&b, &c} {
		err = a.SetDocumentType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DocumentType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Documents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DocumentTypeID != x.ID {
			t.Error("foreign key was wrong value", a.DocumentTypeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DocumentTypeID))
		reflect.Indirect(reflect.ValueOf(&a.DocumentTypeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DocumentTypeID != x.ID {
			t.Error("foreign key was wrong value", a.DocumentTypeID, x.ID)
		}
	}
}

func testDocumentsReload(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocumentsReloadAll(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DocumentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDocumentsSelect(t *testing.T) {
	

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Documents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	documentDBTypes = map[string]string{`ID`: `int`, `Path`: `varchar`, `DocumentTypeID`: `int`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedAt`: `datetime`}
	_               = bytes.MinRead
)

func testDocumentsUpdate(t *testing.T) {
	

	if 0 == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(documentAllColumns) == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, documentDBTypes, true, documentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDocumentsSliceUpdateAll(t *testing.T) {
	

	if len(documentAllColumns) == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Document{}
	if err = randomize.Struct(seed, o, documentDBTypes, true, documentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, documentDBTypes, true, documentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(documentAllColumns, documentPrimaryKeyColumns) {
		fields = documentAllColumns
	} else {
		fields = strmangle.SetComplement(
			documentAllColumns,
			documentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DocumentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDocumentsUpsert(t *testing.T) {
	

	if len(documentAllColumns) == len(documentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Document{}
	if err = randomize.Struct(seed, &o, documentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Document: %s", err)
	}

	count, err := Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, documentDBTypes, false, documentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Document struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Document: %s", err)
	}

	count, err = Documents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
