// Copyright Â© 2021-2022 Jonas Muehlmann
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// THIS CODE IS GENERATED BY GO GENERATE, IT'S TEMPLATE IS /templates/sql_repositories/sql_repository.go.tpl

package repository

{{$EntityName := UppercaseBeginning .EntityName -}}
{{$StructName := print (UppercaseBeginning .DatabaseName) (UppercaseBeginning $EntityName) "Repository" -}}


import (
	 repoCommon "github.com/JonasMuehlmann/bntp.go/model/repository"
	"container/list"
	"fmt"
	"github.com/JonasMuehlmann/bntp.go/internal/helper"
	"github.com/JonasMuehlmann/bntp.go/model"
	"github.com/JonasMuehlmann/bntp.go/model/domain"
	"github.com/JonasMuehlmann/goaoi"
	"github.com/JonasMuehlmann/optional.go"
	"github.com/volatiletech/null/v8"
    "context"
    "database/sql"
    "github.com/volatiletech/sqlboiler/v4/boil"
    "github.com/volatiletech/sqlboiler/v4/queries"
    "github.com/volatiletech/sqlboiler/v4/queries/qm"
    log "github.com/sirupsen/logrus"
    {{ if eq $EntityName "Tag" }}
    "strconv"
    "strings"
    {{ end }}
    {{ if ne $EntityName "Tag" }}
    "time"
    {{ end }}
)


//******************************************************************//
//                        Types and constants                       //
//******************************************************************//
type {{UppercaseBeginning .DatabaseName}}{{UppercaseBeginning $EntityName}}Repository struct {
    db *sql.DB
    {{ if ne $EntityName "Tag" }}
    tagRepository repoCommon.TagRepository
    {{ end }}
}

type {{$EntityName}}Field string

var {{$EntityName}}Fields = struct {
    {{range $field := .StructFields -}}
    {{.FieldName}}  {{$EntityName}}Field
    {{end}}
}{
    {{range $field := .StructFields -}}
    {{.FieldName}}: "{{.LogicalFieldName -}}",
    {{end}}
}

var {{$EntityName}}FieldsList = []{{$EntityName}}Field{
    {{range $field := .StructFields -}}
    {{$EntityName}}Field("{{.FieldName}}"),
    {{end}}
}

var {{$EntityName}}RelationsList = []string{
    {{range $relation := .RelationFields -}}
    "{{.FieldName}}",
    {{end}}
}

type {{$EntityName}}Filter struct {
    {{range $field := .StructFields -}}
    {{.FieldName}} optional.Optional[model.FilterOperation[{{Unslice (UnaliasSQLBoilerSlice .FieldType)}}]]
    {{end}}
    {{range $relation := .RelationFields -}}
    {{.FieldName}} optional.Optional[model.FilterOperation[{{Unslice (UnaliasSQLBoilerSlice .FieldType)}}]]
    {{end}}
}

type {{$EntityName}}FilterMapping[T any] struct {
    Field {{$EntityName}}Field
    FilterOperation model.FilterOperation[T]
}

func (filter *{{$EntityName}}Filter) GetSetFilters() *list.List {
    setFilters := list.New()

    {{range $field := .StructFields -}}
    if filter.{{.FieldName}}.HasValue {
    setFilters.PushBack({{$EntityName}}FilterMapping[{{Unslice (UnaliasSQLBoilerSlice .FieldType)}}]{Field: {{$EntityName}}Fields.{{.FieldName}}, FilterOperation: filter.{{.FieldName}}.Wrappee})
    }
    {{end}}

    return setFilters
}

type {{$EntityName}}Updater struct {
    {{range $field := .StructFields -}}
    {{.FieldName}} optional.Optional[model.UpdateOperation[{{.FieldType}}]]
    {{end}}
    {{range $relation := .RelationFields -}}
    {{.FieldName}} optional.Optional[model.UpdateOperation[{{.FieldType}}]]
    {{end}}
}

type {{$EntityName}}UpdaterMapping[T any] struct {
    Field {{$EntityName}}Field
    Updater model.UpdateOperation[T]
}

func (updater *{{$EntityName}}Updater) GetSetUpdaters() *list.List {
    setUpdaters := list.New()

    {{range $field := .StructFields -}}
    if updater.{{.FieldName}}.HasValue {
    setUpdaters.PushBack({{$EntityName}}UpdaterMapping[{{.FieldType}}]{Field: {{$EntityName}}Fields.{{.FieldName}}, Updater: updater.{{.FieldName}}.Wrappee})
    }
    {{end}}

    return setUpdaters
}

func (updater *{{$EntityName}}Updater) ApplyToModel({{LowercaseBeginning $EntityName}}Model *{{$EntityName}}) {
    {{range $field := .StructFields -}}
    if updater.{{.FieldName}}.HasValue {
        model.ApplyUpdater(&(*{{LowercaseBeginning $EntityName}}Model).{{.FieldName}}, updater.{{.FieldName}}.Wrappee)
    }
    {{end}}
}

type queryModSlice{{$EntityName}} []qm.QueryMod

func (s queryModSlice{{$EntityName}}) Apply(q *queries.Query) {
    qm.Apply(q, s...)
}

func buildQueryModFilter{{$EntityName}}[T any](filterField {{$EntityName}}Field, filterOperation model.FilterOperation[T]) queryModSlice{{$EntityName}} {
    var newQueryMod queryModSlice{{$EntityName}}

    filterOperator := filterOperation.Operator

    switch filterOperator {
    case model.FilterEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" = ?", filterOperand.Operand))
    case model.FilterNEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterNEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" != ?", filterOperand.Operand))
    case model.FilterGreaterThan:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterGreaterThan operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" > ?", filterOperand.Operand))
    case model.FilterGreaterThanEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterGreaterThanEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" >= ?", filterOperand.Operand))
    case model.FilterLessThan:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterLessThan operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" < ?", filterOperand.Operand))
    case model.FilterLessThanEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterLessThanEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" <= ?", filterOperand.Operand))
    case model.FilterIn:
        filterOperand, ok := filterOperation.Operand.(model.ListOperand[any])
        if !ok {
            panic("expected a list operand for FilterIn operator")
        }

        newQueryMod = append(newQueryMod, qm.WhereIn(string(filterField)+" IN (?)", filterOperand.Operands))
    case model.FilterNotIn:
        filterOperand, ok := filterOperation.Operand.(model.ListOperand[any])
        if !ok {
            panic("expected a list operand for FilterNotIn operator")
        }

        newQueryMod = append(newQueryMod, qm.WhereNotIn(string(filterField)+" IN (?)", filterOperand.Operands))
    case model.FilterBetween:
        filterOperand, ok := filterOperation.Operand.(model.RangeOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterBetween operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" BETWEEN ? AND ?", filterOperand.Start, filterOperand.End))
    case model.FilterNotBetween:
        filterOperand, ok := filterOperation.Operand.(model.RangeOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterNotBetween operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" NOT BETWEEN ? AND ?", filterOperand.Start, filterOperand.End))
    case model.FilterLike:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterLike operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" LIKE ?", filterOperand.Operand))
    case model.FilterNotLike:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterLike operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" NOT LIKE ?", filterOperand.Operand))
    case model.FilterOr:
        filterOperand, ok := filterOperation.Operand.(model.CompoundOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterOr operator")
        }
        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.LHS)))
        newQueryMod = append(newQueryMod, qm.Or2(qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.RHS))))
    case model.FilterAnd:
        filterOperand, ok := filterOperation.Operand.(model.CompoundOperand[any])
        if !ok {
            panic("expected a scalar operand for FilterAnd operator")
        }

        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.LHS)))
        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.RHS)))
    default:
        panic("Unhandled FilterOperator")
    }

    return newQueryMod
}

func buildQueryModListFromFilter{{$EntityName}}(setFilters list.List) queryModSlice{{$EntityName}} {
	queryModList := make(queryModSlice{{$EntityName}}, 0, {{len .StructFields}})

	for filter := setFilters.Front(); filter != nil; filter = filter.Next() {
		filterMapping, ok := filter.Value.({{$EntityName}}FilterMapping[any])
		if !ok {
			panic(fmt.Sprintf("expected type %T but got %T", {{$EntityName}}FilterMapping[any]{}, filter))
		}

        newQueryMod := buildQueryModFilter{{$EntityName}}(filterMapping.Field, filterMapping.FilterOperation)

        queryModList = append(queryModList, newQueryMod...)
	}

	return queryModList
}


type {{$StructName}}ConstructorArgs struct {
    DB *sql.DB
    {{ if ne $EntityName "Tag" }}
    TagRepository repoCommon.TagRepository
    {{ end }}
}

func (repo *{{$StructName}}) New(args any) (newRepo repoCommon.{{$EntityName}}Repository, err error) {
    constructorArgs, ok := args.({{$StructName}}ConstructorArgs)
    if !ok {
        err = fmt.Errorf("expected type %T but got %T", {{$StructName}}ConstructorArgs{}, args)

        return
    }

    repo.db = constructorArgs.DB
    {{ if ne $EntityName "Tag" }}
    repo.tagRepository = constructorArgs.TagRepository
    {{ end }}

    newRepo = repo

    return
}


//******************************************************************//
//                              Methods                             //
//******************************************************************//
func (repo *{{$StructName}}) Add(ctx context.Context, domainModels []*domain.{{$EntityName}}) error {
    if len(domainModels) == 0 {
        log.Debug(helper.LogMessageEmptyInput)

        return nil
    }

	err := goaoi.AnyOfSlice(domainModels, goaoi.AreEqualPartial[*domain.{{$EntityName}}](nil))
	if err == nil{
		err = helper.NilInputError{}
		log.Error(err)

		return err
	}

    repositoryModels, err := goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return err
	}

	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            return fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
        }

		err = repoModel.Insert(ctx, tx, boil.Infer())
		if err != nil {
			return err
		}
	}

	tx.Commit()

    return nil
}

func (repo *{{$StructName}}) Replace(ctx context.Context, domainModels []*domain.{{$EntityName}}) error {
    {{/* TODO: Handle empty inputs and input containing/being nil values */}}
    repositoryModels, err := goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return err
	}

	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            return fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
        }

		_, err = repoModel.Update(ctx, tx, boil.Infer())
		if err != nil {
			return err
		}
	}

	tx.Commit()

    return nil
}
func (repo *{{$StructName}}) Upsert(ctx context.Context, domainModels []*domain.{{$EntityName}}) error {
    repositoryModels, err := goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return err
	}

	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            return fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
        }

        {{ if eq .DatabaseName "mssql" }}
		err = repoModel.Upsert(ctx, tx, boil.Infer(), boil.Infer())
        {{else}}
		err = repoModel.Upsert(ctx, tx, false, []string{}, boil.Infer(), boil.Infer())
        {{end}}
		if err != nil {
			return err
		}
	}

	tx.Commit()

    return nil
}

func (repo *{{$StructName}}) Update(ctx context.Context, domainModels []*domain.{{$EntityName}}, domainColumnUpdater *domain.{{$EntityName}}Updater) error {
    repositoryModels, err := goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return err
	}

    repositoryUpdater, err := repo.{{$EntityName}}DomainToRepositoryUpdater(ctx, domainColumnUpdater)
    if err != nil {
        return err
    }

   	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}

    for _, repositoryModel := range   repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            return fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
        }

        repoUpdater, ok := repositoryUpdater.(*{{$EntityName}}Updater)
        if !ok {
            return fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
        }

        repoUpdater.ApplyToModel(repoModel)
        repoModel.Update(ctx, tx, boil.Infer())
    }

    tx.Commit()

    return err
}

func (repo *{{$StructName}}) UpdateWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter, domainColumnUpdater *domain.{{$EntityName}}Updater) (numAffectedRecords int64, err error) {
	var modelsToUpdate {{$EntityName}}Slice

    repositoryFilter, err := repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
        return
    }

    repositoryUpdater, err := repo.{{$EntityName}}DomainToRepositoryUpdater(ctx, domainColumnUpdater)
    if err != nil {
        return
    }

    repoUpdater, ok := repositoryUpdater.(*{{$EntityName}}Updater)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Updater but got %T", repoUpdater)

        return
    }


    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

        return
    }

    setFilters := *repoFilter.GetSetFilters()

	queryFilters := buildQueryModListFromFilter{{$EntityName}}(setFilters)

	modelsToUpdate, err = {{$EntityName}}s(queryFilters...).All(ctx, repo.db)
	if err != nil {
		return
	}

    numAffectedRecords = int64(len(modelsToUpdate))

	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

    for _, repoModel := range modelsToUpdate {
        repoUpdater.ApplyToModel(repoModel)
        repoModel.Update(ctx, tx, boil.Infer())
    }

    tx.Commit()

    return
}

func (repo *{{$StructName}}) Delete(ctx context.Context, domainModels []*domain.{{$EntityName}}) error {
    repositoryModels, err := goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return err
	}

	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            return fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
        }

		_, err = repoModel.Delete(ctx, tx)
		if err != nil {
			return err
		}
	}

	tx.Commit()

    return nil
}

func (repo *{{$StructName}}) DeleteWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (numAffectedRecords int64, err error) {
    repositoryFilter, err := repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
        return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

        return
    }

    setFilters := * repoFilter.GetSetFilters()

	queryFilters := buildQueryModListFromFilter{{$EntityName}}(setFilters)

	tx, err := repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

	numAffectedRecords, err = {{$EntityName}}s(queryFilters...).DeleteAll(ctx, tx)

    tx.Commit()

    return
}

func (repo *{{$StructName}}) CountWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (int64, error) {
    repositoryFilter, err := repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
        return 0, err
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        return 0, fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

    }

    setFilters := *repoFilter.GetSetFilters()

	queryFilters := buildQueryModListFromFilter{{$EntityName}}(setFilters)

	return {{$EntityName}}s(queryFilters...).Count(ctx, repo.db)
}

func (repo *{{$StructName}}) CountAll(ctx context.Context) (int64, error) {
	return {{$EntityName}}s().Count(ctx, repo.db)
}

func (repo *{{$StructName}}) DoesExist(ctx context.Context, domainModel *domain.{{$EntityName}}) (bool, error) {
    repositoryModel, err := repo.{{$EntityName}}DomainToRepositoryModel(ctx, domainModel)
    if err != nil {
        return false, err
    }

    repoModel, ok := repositoryModel.(*{{$EntityName}})
    if !ok {
        return false, fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)
    }


	return {{$EntityName}}Exists(ctx, repo.db, repoModel.ID)
}

func (repo *{{$StructName}}) DoesExistWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (bool, error) {
    repositoryFilter, err := repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
        return false, err
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        return false, fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)
    }

    setFilters := *repoFilter.GetSetFilters()

	queryFilters := buildQueryModListFromFilter{{$EntityName}}(setFilters)

	return {{$EntityName}}s(queryFilters...).Exists(ctx, repo.db)
}

func (repo *{{$StructName}}) GetWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) ([]*domain.{{$EntityName}}, error) {
    repositoryFilter, err := repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
        return []*domain.{{$EntityName}}{}, err
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        return []*domain.{{$EntityName}}{}, fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)
    }


    setFilters := *repoFilter.GetSetFilters()

	queryFilters := buildQueryModListFromFilter{{$EntityName}}(setFilters)

    repositoryModels, err := {{$EntityName}}s(queryFilters...).All(ctx, repo.db)

    domainModels := make([]*domain.{{$EntityName}}, 0, len(repositoryModels))

    for _, repoModel := range repositoryModels {
        domainModel, err := repo.{{$EntityName}}RepositoryToDomainModel(ctx, repoModel)
        if err != nil {
            return domainModels, err
        }

        domainModels = append(domainModels, domainModel)
    }

    return domainModels, err
}

func (repo *{{$StructName}}) GetFirstWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (*domain.{{$EntityName}}, error) {
    repositoryFilter, err := repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
        return nil, err
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        return nil, fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)
    }

    setFilters := * repoFilter.GetSetFilters()

	queryFilters := buildQueryModListFromFilter{{$EntityName}}(setFilters)

    repositoryModel, err := {{$EntityName}}s(queryFilters...).One(ctx, repo.db)

    var domainModel *domain.{{$EntityName}}
    if err != nil {
        return domainModel, err
    }

    domainModel, err =repo.{{$EntityName}}RepositoryToDomainModel(ctx, repositoryModel)

    return domainModel, err
}

func (repo *{{$StructName}}) GetAll(ctx context.Context) ([]*domain.{{$EntityName}}, error) {
    repositoryModels, err := {{$EntityName}}s().All(ctx, repo.db)
    if err != nil {
        return []*domain.{{$EntityName}}{}, err
    }

    domainModels := make([]*domain.{{$EntityName}}, 0, len(repositoryModels))

    for _, repoModel := range repositoryModels {
        domainModel, err := repo.{{$EntityName}}RepositoryToDomainModel(ctx, repoModel)
        if err != nil {
            return domainModels, err
        }

        domainModels = append(domainModels, domainModel)
    }

    return domainModels, err
}

{{ if ne $EntityName "Tag" }}
func (repo *{{$StructName}}) AddType(ctx context.Context, types []string) error {
    for _, type_ := range types {
        repositoryModel := {{$EntityName}}Type{{"{"}}{{$EntityName}}Type: type_}

        err := repositoryModel.Insert(ctx, repo.db, boil.Infer())
        if err != nil {
            return err
        }
    }

    return nil
}

func (repo *{{$StructName}}) DeleteType(ctx context.Context, types []string) error {
    _, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.IN(types)).DeleteAll(ctx, repo.db)

	return err
}

func (repo *{{$StructName}}) UpdateType(ctx context.Context, oldType string, newType string) error {
    repositoryModel, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(oldType)).One(ctx, repo.db)
    if err != nil {
        return err
    }

    repositoryModel.{{$EntityName}}Type = newType

    _, err = repositoryModel.Update(ctx, repo.db, boil.Infer())

    return err
}

func (repo *{{$StructName}}) GetTagRepository() repoCommon.TagRepository {
    return repo.tagRepository
}
{{ end }}


//******************************************************************//
//                            Converters                            //
//******************************************************************//
func (repo *{{$StructName}}) Get{{$EntityName}}DomainToRepositoryModel(ctx context.Context) func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
    return func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
        return repo.{{$EntityName}}DomainToRepositoryModel(ctx, domainModel)
    }
}

func (repo *{{$StructName}}) Get{{$EntityName}}RepositoryToDomainModel(ctx context.Context) func(repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    return func(repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {

        return repo.{{$EntityName}}RepositoryToDomainModel(ctx,repositoryModel)
    }
}


//******************************************************************//
//                          Model Converter                         //
//******************************************************************//
{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModel(ctx context.Context, domainModel *domain.{{$EntityName}}) ( repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.URL = domainModel.URL
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
            return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainModel.Title.HasValue {
        repositoryModelConcrete.Title.Valid = true
        repositoryModelConcrete.Title.String = domainModel.Title.Wrappee
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainModel.IsRead {
        repositoryModelConcrete.IsRead = 1
    }

    if domainModel.IsCollection {
        repositoryModelConcrete.IsCollection = 1
    }

    //*************************    Set Tags    *************************//
    var repositoryTag *Tag

    if domainModel.Tags != nil {
        repositoryModelConcrete.R.Tags = make(TagSlice, 0, len(domainModel.Tags))
        for _,  domainTag := range domainModel.Tags {
        {{/* TODO: This fails if the tags don't exist already, they have to be added beforehand, this should be done in the managers though! */}}
            repositoryTag, err = Tags(TagWhere.Tag.EQ(domainTag.Tag)).One(ctx, repo.db)
            if err != nil {
                err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

                return
            }

            repositoryModelConcrete.R.Tags = append(repositoryModelConcrete.R.Tags, &Tag{{"{"}}Tag: repositoryTag.Tag, ID: repositoryTag.ID})
        }
    }


    //*************************    Set Type    *************************//
	if domainModel.{{$EntityName}}Type.HasValue {
        var repository{{$EntityName}}Type *{{$EntityName}}Type

        repositoryModelConcrete.R.{{$EntityName}}Type = &{{$EntityName}}Type{{"{"}}{{$EntityName}}Type: domainModel.{{$EntityName}}Type.Wrappee}
		repository{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainModel.{{$EntityName}}Type.Wrappee)).One(ctx, repo.db)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

        if repository{{$EntityName}}Type != nil {
            repositoryModelConcrete.{{$EntityName}}TypeID = null.NewInt64(repository{{$EntityName}}Type.ID, true)
            repositoryModelConcrete.R.{{$EntityName}}Type.ID = repository{{$EntityName}}Type.ID
        } else {
            repositoryModelConcrete.R.{{$EntityName}}Type = nil
        }
	}

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModel(ctx context.Context, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.({{$EntityName}})

    domainModel.URL = repositoryModelConcrete.URL
    domainModel.ID = repositoryModelConcrete.ID
    {{/* TODO: Handle slices being nil and containing nil values */}}

    if repositoryModelConcrete.R == nil {
        repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()
    }

    if repositoryModelConcrete.R.{{$EntityName}}Type != nil {
        domainModel.{{$EntityName}}Type = optional.Make(repositoryModelConcrete.R.{{$EntityName}}Type.{{$EntityName}}Type)
    }

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    domainModel.CreatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.CreatedAt)
    if err != nil {
        return
    }

    domainModel.UpdatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.UpdatedAt)
    if err != nil {
        return
    }

    if repositoryModelConcrete.DeletedAt.Valid {
        var t time.Time

        t, err = time.Parse(helper.DateFormat, repositoryModelConcrete.DeletedAt.String)
        if err != nil {
            return
        }

        domainModel.DeletedAt.Push(t)
    }
    {{else}}
    domainModel.CreatedAt = repositoryModelConcrete.CreatedAt
    domainModel.UpdatedAt = repositoryModelConcrete.UpdatedAt

    if repositoryModelConcrete.DeletedAt.Valid {
        domainModel.DeletedAt.Push(repositoryModelConcrete.DeletedAt.Time)
    }
    {{end}}

    //*************************    Set Title    ************************//
    if repositoryModelConcrete.Title.Valid {
        domainModel.Title.Push(repositoryModelConcrete.Title.String)
    }

    //******************    Set IsRead/IsCollection    *****************//
    domainModel.IsRead = repositoryModelConcrete.IsRead > 0
    domainModel.IsCollection = repositoryModelConcrete.IsCollection > 0

    //*************************    Set Tags    *************************//
    var domainTag *domain.Tag

	domainModel.Tags = make([]*domain.Tag, 0, len(repositoryModelConcrete.R.Tags))
    for _, repositoryTag := range repositoryModelConcrete.R.Tags {
        domainTag, err = repo.GetTagRepository().TagRepositoryToDomainModel(ctx, repositoryTag)
        if err != nil {
            return
        }

        domainModel.Tags = append(domainModel.Tags, domainTag)
    }

    return
}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModel(ctx context.Context, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.Path = domainModel.Path
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
            return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}

    //*************************    Set Tags    *************************//
    var repositoryTag *Tag

	repositoryModelConcrete.R.Tags = make(TagSlice, 0, len(domainModel.Tags))
	for _, modelTag := range domainModel.Tags {
		repositoryTag, err = Tags(TagWhere.Tag.EQ(modelTag.Tag)).One(ctx, repo.db)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

		repositoryModelConcrete.R.Tags  = append(repositoryModelConcrete.R.Tags, &Tag{{"{"}}Tag: modelTag.Tag, ID: repositoryTag.ID})
	}

    //*************************    Set Type    *************************//
    var repository{{$EntityName}}Type *{{$EntityName}}Type

	if domainModel.{{$EntityName}}Type.HasValue {
        repositoryModelConcrete.R.{{$EntityName}}Type = &{{$EntityName}}Type{{"{"}}{{$EntityName}}Type: domainModel.{{$EntityName}}Type.Wrappee}
		repository{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainModel.{{$EntityName}}Type.Wrappee)).One(ctx, repo.db)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

        if repository{{$EntityName}}Type != nil {
            repositoryModelConcrete.{{$EntityName}}TypeID = null.NewInt64(repository{{$EntityName}}Type.ID, true)
            repositoryModelConcrete.R.{{$EntityName}}Type.ID = repository{{$EntityName}}Type.ID
        } else {
            repositoryModelConcrete.R.{{$EntityName}}Type = nil
        }
	}


    //**************    Set linked/backlinked documents    *************//
    var repository{{$EntityName}}Raw any

    repositoryModelConcrete.R.Source{{$EntityName}}s  = make({{$EntityName}}Slice, 0, len(domainModel.Linked{{$EntityName}}s))
    repositoryModelConcrete.R.Destination{{$EntityName}}s  = make({{$EntityName}}Slice, 0, len(domainModel.Backlinked{{$EntityName}}s))

    for _ , link := range domainModel.Linked{{$EntityName}}s {
        repository{{$EntityName}}Raw, err = repo.{{$EntityName}}DomainToRepositoryModel(ctx, link)
        if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

            return
        }

        repositoryModelConcrete.R.Source{{$EntityName}}s = append(repositoryModelConcrete.R.Source{{$EntityName}}s, repository{{$EntityName}}Raw.(*{{$EntityName}}))
    }

    for _ , backlink := range domainModel.Backlinked{{$EntityName}}s {
        repository{{$EntityName}}Raw, err = repo.{{$EntityName}}DomainToRepositoryModel(ctx, backlink)
        if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

            return
        }

        repositoryModelConcrete.R.Destination{{$EntityName}}s = append(repositoryModelConcrete.R.Destination{{$EntityName}}s, repository{{$EntityName}}Raw.(*{{$EntityName}}))
    }

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModel(ctx context.Context, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.({{$EntityName}})

    domainModel.Path = repositoryModelConcrete.Path
    domainModel.ID = repositoryModelConcrete.ID

    if repositoryModelConcrete.R == nil {
        repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()
    }

    if repositoryModelConcrete.R.{{$EntityName}}Type != nil {
        domainModel.{{$EntityName}}Type = optional.Make(repositoryModelConcrete.R.{{$EntityName}}Type.{{$EntityName}}Type)
    }

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    domainModel.CreatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.CreatedAt)
    if err != nil {
        return
    }

    domainModel.UpdatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.UpdatedAt)
    if err != nil {
        return
    }

    var t time.Time

    if repositoryModelConcrete.DeletedAt.Valid {
        t, err = time.Parse(helper.DateFormat, repositoryModelConcrete.DeletedAt.String)
        if err != nil {
            return
        }

        domainModel.DeletedAt.Push(t)
    }
    {{else}}
    domainModel.CreatedAt = repositoryModelConcrete.CreatedAt
    domainModel.UpdatedAt = repositoryModelConcrete.UpdatedAt

    if repositoryModelConcrete.DeletedAt.Valid {
        domainModel.DeletedAt.Push(repositoryModelConcrete.DeletedAt.Time)
    }
    {{end}}

    //*************************    Set Tags    *************************//
    var domainTag *domain.Tag

	domainModel.Tags = make([]*domain.Tag, 0, len(repositoryModelConcrete.R.Tags))
    for _, repositoryTag := range repositoryModelConcrete.R.Tags {
    domainTag, err = repo.GetTagRepository().TagRepositoryToDomainModel(ctx, repositoryTag)
        if err != nil {
            return
        }

        domainModel.Tags = append(domainModel.Tags, domainTag)
    }

    //**************    Set linked/backlinked documents    *************//
    var domain{{$EntityName}} *domain.{{$EntityName}}

    domainModel.Linked{{$EntityName}}s = make([]*domain.{{$EntityName}}, 0, len(repositoryModelConcrete.R.Source{{$EntityName}}s))
    domainModel.Backlinked{{$EntityName}}s = make([]*domain.{{$EntityName}}, 0, len(repositoryModelConcrete.R.Destination{{$EntityName}}s))

    for _ , link := range repositoryModelConcrete.R.Source{{$EntityName}}s {
        domain{{$EntityName}}, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, link)
        if err != nil {
            return
        }

        domainModel.Linked{{$EntityName}}s = append(domainModel.Linked{{$EntityName}}s, domain{{$EntityName}})
    }

    for _ , backlink := range repositoryModelConcrete.R.Destination{{$EntityName}}s {
        domain{{$EntityName}}, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, backlink)
        if err != nil {
            return
        }

        domainModel.Backlinked{{$EntityName}}s = append(domainModel.Backlinked{{$EntityName}}s, domain{{$EntityName}})
    }

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModel(ctx context.Context, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {

// TODO: make sure to insert all tags in ParentPath and Subtags into db
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.ID = domainModel.ID
    repositoryModelConcrete.{{$EntityName}} = domainModel.{{$EntityName}}


//***********************    Set Parent{{$EntityName}}    **********************//
    if len(domainModel.ParentPath) > 0 {
        repositoryModelConcrete.Parent{{$EntityName}} = null.NewInt64(domainModel.ParentPath[len(domainModel.ParentPath) - 1].ID, true)
    }

//*************************    Set Path    *************************//
for _, tag := range domainModel.ParentPath {
    repositoryModelConcrete.Path += strconv.FormatInt(tag.ID, 10) + ";"
}

repositoryModelConcrete.Path += strconv.FormatInt(domainModel.ID, 10)

//************************    Set Children  ************************//
for _, tag := range domainModel.Subtags {
    repositoryModelConcrete.Children += strconv.FormatInt(tag.ID, 10) + ";"
}

    repositoryModel = repositoryModelConcrete

    return
}

// TODO: These functions should be context aware
func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModel(ctx context.Context, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
// TODO: make sure to insert all tags in ParentPath and Subtags into db
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.({{$EntityName}})

    domainModel.ID = repositoryModelConcrete.ID
    domainModel.{{$EntityName}} = repositoryModelConcrete.{{$EntityName}}

//***********************    Set ParentPath    **********************//
var parent{{$EntityName}}ID int64
var parent{{$EntityName}} *{{$EntityName}}
var domainParent{{$EntityName}} *domain.{{$EntityName}}

for _, parent{{$EntityName}}IDRaw := range strings.Split(repositoryModelConcrete.Path, ";")[:len(repositoryModelConcrete.Path)-2]{
    parent{{$EntityName}}ID, err = strconv.ParseInt(parent{{$EntityName}}IDRaw, 10, 64)
    if err != nil {
        return
    }

    parent{{$EntityName}}, err = {{$EntityName}}s({{$EntityName}}Where.ID.EQ(parent{{$EntityName}}ID)).One(ctx, repo.db)
    if err != nil {
        return
    }

    domainParent{{$EntityName}}, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, parent{{$EntityName}})
    if err != nil {
        return
    }

    domainModel.ParentPath = append(domainModel.ParentPath, domainParent{{$EntityName}})
}

//************************    Set Subtags ************************//
var child{{$EntityName}}ID int64
var child{{$EntityName}} *{{$EntityName}}
var domainChild{{$EntityName}} *domain.{{$EntityName}}

for _, child{{$EntityName}}IDRaw := range strings.Split(repositoryModelConcrete.Children, ";")[:len(repositoryModelConcrete.Children)-2]{
    child{{$EntityName}}ID, err = strconv.ParseInt(child{{$EntityName}}IDRaw, 10, 64)
    if err != nil {
        return
    }

    child{{$EntityName}}, err = {{$EntityName}}s({{$EntityName}}Where.ID.EQ(child{{$EntityName}}ID)).One(ctx, repo.db)
    if err != nil {
        return
    }

    domainChild{{$EntityName}}, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, child{{$EntityName}})
    if err != nil {
        return
    }

    domainModel.Subtags = append(domainModel.Subtags, domainChild{{$EntityName}})
}

    repositoryModel = repositoryModelConcrete

    return
}
{{end}}
//******************************************************************//
//                         Filter Converter                         //
//******************************************************************//
{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryFilter(ctx context.Context, domainFilter *domain.{{$EntityName}}Filter) (repositoryFilter any, err error)  {
    repositoryFilterConcrete := new({{$EntityName}}Filter)

    repositoryFilterConcrete.URL = domainFilter.URL
    repositoryFilterConcrete.ID = domainFilter.ID

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    if domainFilter.CreatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.CreatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
            return
        }

        repositoryFilterConcrete.CreatedAt.Push(convertedFilter)
    }
    if domainFilter.UpdatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.UpdatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
            return
        }

        repositoryFilterConcrete.UpdatedAt.Push(convertedFilter)
    }
    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.String]

        convertedFilter, err = model.ConvertFilter[null.String, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullStr)
        if err != nil {
            return
        }

        repositoryFilterConcrete.DeletedAt.Push(convertedFilter)
    }
    {{else}}
    repositoryFilterConcrete.CreatedAt = domainFilter.CreatedAt
    repositoryFilterConcrete.UpdatedAt = domainFilter.UpdatedAt

    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.Time]

        convertedFilter, err = model.ConvertFilter[null.Time, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullTime)
        if err != nil {
            return
        }

        repositoryFilterConcrete.DeletedAt.Push(convertedFilter)
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainFilter.Title.HasValue {
        var convertedFilter model.FilterOperation[null.String]

        convertedFilter, err = model.ConvertFilter[null.String, optional.Optional[string]](domainFilter.Title.Wrappee, repoCommon.OptionalStringToNullString)
        if err != nil {
            return
        }

        repositoryFilterConcrete.Title.Push(convertedFilter)
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainFilter.IsRead.HasValue {
        var convertedFilter model.FilterOperation[int64]

        convertedFilter, err = model.ConvertFilter[int64, bool](domainFilter.IsRead.Wrappee, repoCommon.BoolToInt)
        if err != nil {
            return
        }

        repositoryFilterConcrete.IsRead.Push(convertedFilter)
    }

    if domainFilter.IsCollection.HasValue {
        var convertedFilter model.FilterOperation[int64]

        convertedFilter, err = model.ConvertFilter[int64, bool](domainFilter.IsCollection.Wrappee, repoCommon.BoolToInt)
        if err != nil {
            return
        }

        repositoryFilterConcrete.IsCollection.Push(convertedFilter)
    }


    //*************************    Set Tags    *************************//

    if domainFilter.Tags.HasValue {
        var convertedFilter model.FilterOperation[*Tag]

        convertedFilter, err = model.ConvertFilter[*Tag,*domain.Tag](domainFilter.Tags.Wrappee, repoCommon.MakeDomainToRepositoryEntityConverterGeneric[domain.Tag, Tag](ctx, repo.GetTagRepository().TagDomainToRepositoryModel))
        if err != nil {
            return
        }

        repositoryFilterConcrete.Tags.Push(convertedFilter)
    }

    //*************************    Set Type    *************************//

    if domainFilter.{{$EntityName}}Type.HasValue {
        var convertedTypeIDFilter model.FilterOperation[null.Int64]
        var convertedTypeFilter model.FilterOperation[*{{$EntityName}}Type]

        convertedTypeFilter, err = model.ConvertFilter[*{{$EntityName}}Type,optional.Optional[string]](domainFilter.{{$EntityName}}Type.Wrappee, func(type_ optional.Optional[string]) (*{{$EntityName}}Type, error) {
            if !type_.HasValue {
                return  nil, nil
            }


            bookmarkType, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(type_.Wrappee)).One(ctx, repo.db)

            return bookmarkType, err
        })
        if err != nil {
            return
        }

        convertedTypeIDFilter, err = model.ConvertFilter[null.Int64,optional.Optional[string]](domainFilter.{{$EntityName}}Type.Wrappee, func(type_ optional.Optional[string]) (null.Int64, error) {
            if !type_.HasValue {
                return  null.NewInt64(-1, false), nil
            }


            bookmarkType, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(type_.Wrappee)).One(ctx, repo.db)

            return null.NewInt64(bookmarkType.ID, true), err
        })
        if err != nil {
            return
        }


        repositoryFilterConcrete.{{$EntityName}}Type.Push(convertedTypeFilter)
        repositoryFilterConcrete.{{$EntityName}}TypeID.Push(convertedTypeIDFilter)
    }

    repositoryFilter = repositoryFilterConcrete

    return
}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryFilter(ctx context.Context, domainFilter *domain.{{$EntityName}}Filter) (repositoryFilter any, err error)  {

    repositoryFilterConcrete := new({{$EntityName}}Filter)

    repositoryFilterConcrete.Path = domainFilter.Path
    repositoryFilterConcrete.ID = domainFilter.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    if domainFilter.CreatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.CreatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
            return
        }

        repositoryFilterConcrete.CreatedAt.Push(convertedFilter)
    }
    if domainFilter.UpdatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.UpdatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
            return
        }

        repositoryFilterConcrete.UpdatedAt.Push(convertedFilter)
    }
    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.String]

        convertedFilter, err = model.ConvertFilter[null.String, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullStr)
        if err != nil {
            return
        }

        repositoryFilterConcrete.DeletedAt.Push(convertedFilter)
    }
    {{else}}
    repositoryFilterConcrete.CreatedAt = domainFilter.CreatedAt
    repositoryFilterConcrete.UpdatedAt = domainFilter.UpdatedAt

    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.Time]

        convertedFilter, err = model.ConvertFilter[null.Time, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullTime)
        if err != nil {
            return
        }

        repositoryFilterConcrete.DeletedAt.Push(convertedFilter)
    }
    {{end}}

    //*************************    Set Tags    *************************//
    if domainFilter.Tags.HasValue {
        var convertedFilter model.FilterOperation[*Tag]

        convertedFilter, err = model.ConvertFilter[*Tag,*domain.Tag](domainFilter.Tags.Wrappee, repoCommon.MakeDomainToRepositoryEntityConverterGeneric[domain.Tag, Tag](ctx, repo.GetTagRepository().TagDomainToRepositoryModel))
        if err != nil {
            return
        }

        repositoryFilterConcrete.Tags.Push(convertedFilter)
    }

    //*************************    Set Type    *************************//
    if domainFilter.{{$EntityName}}Type.HasValue {
        var convertedTypeIDFilter model.FilterOperation[null.Int64]
        var convertedTypeFilter model.FilterOperation[*{{$EntityName}}Type]

        convertedTypeFilter, err = model.ConvertFilter[*{{$EntityName}}Type,optional.Optional[string]](domainFilter.{{$EntityName}}Type.Wrappee, func(type_ optional.Optional[string]) (*{{$EntityName}}Type, error) {
            if !type_.HasValue {
                return  nil, nil
            }


            bookmarkType, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(type_.Wrappee)).One(ctx, repo.db)

            return bookmarkType, err
        })
        if err != nil {
            return
        }

        convertedTypeIDFilter, err = model.ConvertFilter[null.Int64,optional.Optional[string]](domainFilter.{{$EntityName}}Type.Wrappee, func(type_ optional.Optional[string]) (null.Int64, error) {
            if !type_.HasValue {
                return  null.NewInt64(-1, false), nil
            }


            bookmarkType, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(type_.Wrappee)).One(ctx, repo.db)

            return null.NewInt64(bookmarkType.ID, true), err
        })
        if err != nil {
            return
        }


        repositoryFilterConcrete.{{$EntityName}}Type.Push(convertedTypeFilter)
        repositoryFilterConcrete.{{$EntityName}}TypeID.Push(convertedTypeIDFilter)
    }


    //**************    Set linked/backlinked documents    *************//
    if domainFilter.Linked{{$EntityName}}s.HasValue {
        var convertedFilter model.FilterOperation[*{{$EntityName}}]

        convertedFilter, err = model.ConvertFilter[*{{$EntityName}},*domain.{{$EntityName}}](domainFilter.Linked{{$EntityName}}s.Wrappee, repoCommon.MakeDomainToRepositoryEntityConverterGeneric[domain.{{$EntityName}},{{$EntityName}}](ctx, repo.{{$EntityName}}DomainToRepositoryModel))
        if err != nil {
            return
        }

        repositoryFilterConcrete.Source{{$EntityName}}s.Push(convertedFilter)
    }
    if domainFilter.Backlinked{{$EntityName}}s.HasValue {
        var convertedFilter model.FilterOperation[*{{$EntityName}}]

        convertedFilter, err = model.ConvertFilter[*{{$EntityName}},*domain.{{$EntityName}}](domainFilter.Backlinked{{$EntityName}}s.Wrappee, repoCommon.MakeDomainToRepositoryEntityConverterGeneric[domain.{{$EntityName}},{{$EntityName}}](ctx, repo.{{$EntityName}}DomainToRepositoryModel))
        if err != nil {
            return
        }

        repositoryFilterConcrete.Destination{{$EntityName}}s.Push(convertedFilter)
    }

    repositoryFilter = repositoryFilterConcrete

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryFilter(ctx context.Context, domainFilter *domain.{{$EntityName}}Filter) (repositoryFilter any, err error)  {
    repositoryFilterConcrete := new({{$EntityName}}Filter)

	repositoryFilterConcrete.ID = domainFilter.ID
	repositoryFilterConcrete.{{$EntityName}} = domainFilter.{{$EntityName}}

	if domainFilter.ParentPath.HasValue {

		//*********************    Set ParentPath    *********************//
		var convertedParent{{$EntityName}}{{$EntityName}}Filter model.FilterOperation[*{{$EntityName}}]

		convertedParent{{$EntityName}}{{$EntityName}}Filter, err = model.ConvertFilter[*{{$EntityName}}, *domain.{{$EntityName}}](domainFilter.ParentPath.Wrappee, repoCommon.MakeDomainToRepositoryEntityConverterGeneric[domain.{{$EntityName}}, {{$EntityName}}](ctx, repo.{{$EntityName}}DomainToRepositoryModel))
		if err != nil {
			return
		}

		repositoryFilterConcrete.Parent{{$EntityName}}{{$EntityName}}.Push(convertedParent{{$EntityName}}{{$EntityName}}Filter)
		//*************************    Set Path    *************************//
		var convertedPathFilter model.FilterOperation[string]

		convertedPathFilter, err = model.ConvertFilter[string, *domain.{{$EntityName}}](domainFilter.ParentPath.Wrappee, func(tag *domain.{{$EntityName}}) (string, error) { return strconv.FormatInt(tag.ID, 10), nil })
		if err != nil {
			return
		}

		repositoryFilterConcrete.Path.Push(convertedPathFilter)
		//**********************    Set Parent{{$EntityName}}    ***********************//
		var convertedParent{{$EntityName}}Filter model.FilterOperation[null.Int64]

		convertedParent{{$EntityName}}Filter, err = model.ConvertFilter[null.Int64, *domain.{{$EntityName}}](domainFilter.ParentPath.Wrappee, func(tag *domain.{{$EntityName}}) (null.Int64, error) { return null.NewInt64(tag.ID, true), nil })
		if err != nil {
			return
		}

		repositoryFilterConcrete.Parent{{$EntityName}}.Push(convertedParent{{$EntityName}}Filter)
	}

	//**********************    Set child tags *********************//
	if domainFilter.Subtags.HasValue {
		var convertedFilter model.FilterOperation[string]

		convertedFilter, err = model.ConvertFilter[string, *domain.{{$EntityName}}](domainFilter.Subtags.Wrappee, func(tag *domain.{{$EntityName}}) (string, error) { return strconv.FormatInt(tag.ID, 10), nil })
		if err != nil {
			return
		}

		repositoryFilterConcrete.Children.Push(convertedFilter)
	}

    repositoryFilter = repositoryFilterConcrete

	return
}
{{end}}
//******************************************************************//
//                         Updater Converter                        //
//******************************************************************//
{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryUpdater(ctx context.Context, domainUpdater *domain.{{$EntityName}}Updater) (repositoryUpdater any, err error)  {
    repositoryUpdaterConcrete := new({{$EntityName}}Updater)

	if domainUpdater.CreatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.CreatedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.CreatedAt.Push(model.UpdateOperation[string]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.CreatedAt.Push(model.UpdateOperation[time.Time]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: domainUpdater.CreatedAt.Wrappee.Operand})
        {{ end}}
    }

	if domainUpdater.UpdatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.UpdatedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.UpdatedAt.Push(model.UpdateOperation[string]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.UpdatedAt.Push(model.UpdateOperation[time.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: domainUpdater.UpdatedAt.Wrappee.Operand})
        {{ end }}
    }

	if domainUpdater.DeletedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater null.String
        convertedUpdater, err = repoCommon.OptionalTimeToNullStr(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.DeletedAt.Push(model.UpdateOperation[null.String]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.DeletedAt.Push(model.UpdateOperation[null.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedTime})
        {{ end }}
    }

	if domainUpdater.URL.HasValue {
        repositoryUpdaterConcrete.URL.Push(model.UpdateOperation[string]{Operator: domainUpdater.URL.Wrappee.Operator, Operand: repositoryUpdaterConcrete.URL.Wrappee.Operand})
    }

	if domainUpdater.Title.HasValue {
        var convertedUpdater null.String
        convertedUpdater, err = repoCommon.OptionalStringToNullString(domainUpdater.Title.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.Title.Push(model.UpdateOperation[null.String]{Operator: domainUpdater.Title.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Tags.HasValue {
        var rawTag any
        convertedUpdater := make(TagSlice, 0, len(domainUpdater.Tags.Wrappee.Operand))

        for _, tag := range domainUpdater.Tags.Wrappee.Operand {
            rawTag, err = repo.GetTagRepository().TagDomainToRepositoryModel(ctx, tag)
            if err != nil {
                return
            }

            convertedUpdater = append(convertedUpdater, rawTag.(*Tag))
        }

        repositoryUpdaterConcrete.Tags.Push(model.UpdateOperation[TagSlice]{Operator: domainUpdater.Tags.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.ID.HasValue {
        repositoryUpdaterConcrete.ID.Push(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: repositoryUpdaterConcrete.ID.Wrappee.Operand})
    }

	if domainUpdater.IsCollection.HasValue {
        var convertedUpdater int64
        convertedUpdater, err = repoCommon.BoolToInt(domainUpdater.IsCollection.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.IsCollection.Push(model.UpdateOperation[int64]{Operator: domainUpdater.IsCollection.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.IsRead.HasValue {
        var convertedUpdater int64
        convertedUpdater, err = repoCommon.BoolToInt(domainUpdater.IsRead.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.IsRead.Push(model.UpdateOperation[int64]{Operator: domainUpdater.IsRead.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.{{$EntityName}}Type.HasValue {
        var converted{{$EntityName}}Type *{{$EntityName}}Type
        if domainUpdater.{{$EntityName}}Type.Wrappee.Operand.HasValue {
            converted{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainUpdater.{{$EntityName}}Type.Wrappee.Operand.Wrappee)).One(context.Background(), repo.db)
            if err != nil {
                return
            }
        } else {
            converted{{$EntityName}}Type = nil
        }

        repositoryUpdaterConcrete.{{$EntityName}}Type.Push(model.UpdateOperation[*{{$EntityName}}Type]{Operator: domainUpdater.{{$EntityName}}Type.Wrappee.Operator, Operand: converted{{$EntityName}}Type})
    }

    repositoryUpdater = repositoryUpdaterConcrete

    return

}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryUpdater(ctx context.Context, domainUpdater *domain.{{$EntityName}}Updater) (repositoryUpdater any, err error)  {
    repositoryUpdaterConcrete := new({{$EntityName}}Updater)

	if domainUpdater.{{$EntityName}}Type.HasValue {
        var convertedUpdater *{{$EntityName}}Type
        if domainUpdater.{{$EntityName}}Type.Wrappee.Operand.HasValue {
            convertedUpdater, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainUpdater.{{$EntityName}}Type.Wrappee.Operand.Wrappee)).One(context.Background(), repo.db)
            if err != nil {
                return
		}
        } else {
            convertedUpdater = nil
        }

        repositoryUpdaterConcrete.{{$EntityName}}Type.Push(model.UpdateOperation[*{{$EntityName}}Type]{Operator: domainUpdater.{{$EntityName}}Type.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Path.HasValue {
        repositoryUpdaterConcrete.Path.Push(model.UpdateOperation[string]{Operator: domainUpdater.Path.Wrappee.Operator, Operand: repositoryUpdaterConcrete.Path.Wrappee.Operand})
    }

	if domainUpdater.CreatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.CreatedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.CreatedAt.Push(model.UpdateOperation[string]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.CreatedAt.Push(model.UpdateOperation[time.Time]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: domainUpdater.CreatedAt.Wrappee.Operand})
        {{ end}}
    }

	if domainUpdater.UpdatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.UpdatedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.UpdatedAt.Push(model.UpdateOperation[string]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.UpdatedAt.Push(model.UpdateOperation[time.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: domainUpdater.UpdatedAt.Wrappee.Operand})
        {{ end }}
    }

	if domainUpdater.DeletedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater null.String
        convertedUpdater, err = repoCommon.OptionalTimeToNullStr(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.DeletedAt.Push(model.UpdateOperation[null.String]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
            return
        }

        repositoryUpdaterConcrete.DeletedAt.Push(model.UpdateOperation[null.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedTime})
        {{ end }}
    }

	if domainUpdater.Tags.HasValue {
        var rawTag any
        convertedUpdater := make(TagSlice, 0, len(domainUpdater.Tags.Wrappee.Operand))

        for _, tag := range domainUpdater.Tags.Wrappee.Operand {
            rawTag, err =  repo.GetTagRepository().TagDomainToRepositoryModel(ctx, tag)
            if err != nil {
                return
            }

            convertedUpdater = append(convertedUpdater, rawTag.(*Tag))
        }

        repositoryUpdaterConcrete.Tags.Push(model.UpdateOperation[TagSlice]{Operator: domainUpdater.Tags.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Linked{{$EntityName}}s.HasValue {
        var converted{{$EntityName}}Raw any
        convertedUpdater := make({{$EntityName}}Slice, 0, len(domainUpdater.Linked{{$EntityName}}s.Wrappee.Operand))

        for _, document := range domainUpdater.Linked{{$EntityName}}s.Wrappee.Operand {
            converted{{$EntityName}}Raw, err = repo.{{$EntityName}}DomainToRepositoryModel(ctx, document)
            if err != nil {
                return
            }

            convertedUpdater = append(convertedUpdater, converted{{$EntityName}}Raw.(*{{$EntityName}}))
        }

        repositoryUpdaterConcrete.Destination{{$EntityName}}s.Push(model.UpdateOperation[{{$EntityName}}Slice]{Operator: domainUpdater.Linked{{$EntityName}}s.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Backlinked{{$EntityName}}s.HasValue {
        var converted{{$EntityName}}Raw any
        convertedUpdater := make({{$EntityName}}Slice, 0, len(domainUpdater.Backlinked{{$EntityName}}s.Wrappee.Operand))

        for _, document := range domainUpdater.Backlinked{{$EntityName}}s.Wrappee.Operand {
            converted{{$EntityName}}Raw, err = repo.{{$EntityName}}DomainToRepositoryModel(ctx, document)
            if err != nil {
                return
            }

            convertedUpdater = append(convertedUpdater, converted{{$EntityName}}Raw.(*{{$EntityName}}))
        }

        repositoryUpdaterConcrete.Source{{$EntityName}}s.Push(model.UpdateOperation[{{$EntityName}}Slice]{Operator: domainUpdater.Backlinked{{$EntityName}}s.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.ID.HasValue {
        repositoryUpdaterConcrete.ID.Push(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: repositoryUpdaterConcrete.ID.Wrappee.Operand})
    }

    repositoryUpdater = repositoryUpdaterConcrete

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryUpdater(ctx context.Context, domainUpdater *domain.{{$EntityName}}Updater) (repositoryUpdater any, err error)  {
    repositoryUpdaterConcrete := new({{$EntityName}}Updater)

	//**************************    Set tag    *************************//
	if domainUpdater.{{$EntityName}}.HasValue {
		repositoryUpdaterConcrete.{{$EntityName}}.Push(model.UpdateOperation[string]{Operator: domainUpdater.{{$EntityName}}.Wrappee.Operator, Operand: repositoryUpdaterConcrete.{{$EntityName}}.Wrappee.Operand})
	}

	//***********    Set ParentPath    ***********//
	if domainUpdater.ParentPath.HasValue {
		var converted{{$EntityName}}Raw any
		tag := domainUpdater.ParentPath.Wrappee.Operand[len(domainUpdater.ParentPath.Wrappee.Operand)-1]
		converted{{$EntityName}}Raw, err =  repo.{{$EntityName}}DomainToRepositoryModel(ctx, tag)
		if err != nil {
			return
		}

		repositoryUpdaterConcrete.Parent{{$EntityName}}{{$EntityName}}.Push(model.UpdateOperation[*{{$EntityName}}]{Operator: domainUpdater.ParentPath.Wrappee.Operator, Operand: converted{{$EntityName}}Raw.(*Tag)})
		repositoryUpdaterConcrete.Parent{{$EntityName}}.Push(model.UpdateOperation[null.Int64]{Operator: domainUpdater.ParentPath.Wrappee.Operator, Operand: null.NewInt64(converted{{$EntityName}}Raw.(*Tag).ID, true)})

		pathIDs := make([]string, 0, len(domainUpdater.ParentPath.Wrappee.Operand)+1)
		for _, tag := range domainUpdater.ParentPath.Wrappee.Operand {
			pathIDs = append(pathIDs, strconv.FormatInt(tag.ID, 10))
		}

		pathIDs = append(pathIDs, strconv.FormatInt(tag.ID, 10))

		repositoryUpdaterConcrete.Path.Push(model.UpdateOperation[string]{Operator: domainUpdater.ParentPath.Wrappee.Operator, Operand: strings.Join(pathIDs, ";")})
	}

	//***********************    Set Children    ***********************//
	if domainUpdater.Subtags.HasValue {
		pathIDs := make([]string, 0, len(domainUpdater.Subtags.Wrappee.Operand)+1)
		for _, tag := range domainUpdater.Subtags.Wrappee.Operand {
			pathIDs = append(pathIDs, strconv.FormatInt(tag.ID, 10))
		}

		repositoryUpdaterConcrete.Children.Push(model.UpdateOperation[string]{Operator: domainUpdater.Subtags.Wrappee.Operator, Operand: strings.Join(pathIDs, ";")})
	}

	//**************************    Set ID    **************************//
	if domainUpdater.ID.HasValue {
		repositoryUpdaterConcrete.ID.Push(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: repositoryUpdaterConcrete.ID.Wrappee.Operand})
	}

    repositoryUpdater = repositoryUpdaterConcrete

	return
}
{{end}}
