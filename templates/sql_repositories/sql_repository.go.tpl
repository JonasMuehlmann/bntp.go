// Copyright Â© 2021-2022 Jonas Muehlmann
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// THIS CODE IS GENERATED BY GO GENERATE, IT'S TEMPLATE IS /templates/sql_repositories/sql_repository.go.tpl

package repository

{{$EntityName := UppercaseBeginning .EntityName -}}
{{$StructName := print (UppercaseBeginning .DatabaseName) (UppercaseBeginning $EntityName) "Repository" -}}


import (
	 repoCommon "github.com/JonasMuehlmann/bntp.go/model/repository"
	"container/list"
	"fmt"
    "errors"
	"github.com/JonasMuehlmann/bntp.go/internal/helper"
	"github.com/JonasMuehlmann/bntp.go/model"
	"github.com/JonasMuehlmann/bntp.go/model/domain"
	"github.com/JonasMuehlmann/goaoi"
	"github.com/JonasMuehlmann/optional.go"
	"github.com/volatiletech/null/v8"
    "context"
    "database/sql"
    "github.com/volatiletech/sqlboiler/v4/boil"
    "github.com/volatiletech/sqlboiler/v4/queries"
    "github.com/volatiletech/sqlboiler/v4/queries/qm"
    "github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
    log "github.com/sirupsen/logrus"
	"github.com/stoewer/go-strcase"
    "strings"
    {{ if eq $EntityName "Tag" }}
    "strconv"
    {{ end }}
    {{ if ne $EntityName "Tag" }}
    "time"
    {{ end }}
)


//******************************************************************//
//                        Types and constants                       //
//******************************************************************//
type {{UppercaseBeginning .DatabaseName}}{{UppercaseBeginning $EntityName}}Repository struct {
    db *sql.DB
    Logger *log.Logger
    {{ if ne $EntityName "Tag" }}
    tagRepository repoCommon.TagRepository
    {{ end }}
}

type {{$EntityName}}Field string

var {{$EntityName}}Fields = struct {
    {{range $field := .StructFields -}}
    {{.FieldName}}  {{$EntityName}}Field
    {{end}}
}{
    {{range $field := .StructFields -}}
    {{.FieldName}}: "{{.LogicalFieldName -}}",
    {{end}}
}

var {{$EntityName}}FieldsList = []{{$EntityName}}Field{
    {{range $field := .StructFields -}}
    {{$EntityName}}Field("{{.FieldName}}"),
    {{end}}
}

var {{$EntityName}}RelationsList = []string{
    {{range $relation := .RelationFields -}}
    "{{.FieldName}}",
    {{end}}
}

type {{$EntityName}}Filter struct {
    {{range $field := .StructFields -}}
    {{.FieldName}} optional.Optional[model.FilterOperation[{{Unslice (UnaliasSQLBoilerSlice .FieldType)}}]]
    {{end}}
    {{range $relation := .RelationFields -}}
    {{- if eq .FieldName "BookmarkType"}}
    {{- else if eq .FieldName "DocumentType"}}
    {{- else if eq .FieldName "ParentTagTags"}}
    {{- else if eq .FieldName "ParentTagTag"}}
    {{- else if eq .FieldName "Bookmarks"}}
    {{- else if eq .FieldName "Documents"}}
    {{- else }}
    {{.FieldName}} optional.Optional[model.FilterOperation[{{Unslice (UnaliasSQLBoilerSlice .FieldType)}}]]
    {{- end -}}
    {{end}}
}

type {{$EntityName}}Updater struct {
    {{range $field := .StructFields -}}
    {{.FieldName}} optional.Optional[model.UpdateOperation[{{.FieldType}}]]
    {{end}}
    {{range $relation := .RelationFields -}}
    {{- if eq .FieldName "BookmarkType"}}
    {{- else if eq .FieldName "DocumentType"}}
    {{- else if eq .FieldName "ParentTagTags"}}
    {{- else if eq .FieldName "ParentTagTag"}}
    {{- else if eq .FieldName "Bookmarks"}}
    {{- else if eq .FieldName "Documents"}}
    {{- else }}
    {{.FieldName}} optional.Optional[model.UpdateOperation[{{.FieldType}}]]
    {{- end -}}
    {{end}}
}

type {{$EntityName}}UpdaterMapping[T any] struct {
    Field {{$EntityName}}Field
    Updater model.UpdateOperation[T]
}

func (updater *{{$EntityName}}Updater) GetSetUpdaters() *list.List {
    setUpdaters := list.New()

    {{range $field := .StructFields -}}
    if updater.{{.FieldName}}.HasValue {
    setUpdaters.PushBack({{$EntityName}}UpdaterMapping[{{.FieldType}}]{Field: {{$EntityName}}Fields.{{.FieldName}}, Updater: updater.{{.FieldName}}.Wrappee})
    }
    {{end}}

    return setUpdaters
}

func (updater *{{$EntityName}}Updater) ApplyToModel({{LowercaseBeginning $EntityName}}Model *{{$EntityName}}) {
    {{range $field := .StructFields -}}
    if updater.{{.FieldName}}.HasValue {
        model.ApplyUpdater(&(*{{LowercaseBeginning $EntityName}}Model).{{.FieldName}}, updater.{{.FieldName}}.Wrappee)
    }
    {{end}}
}

type queryModSlice{{$EntityName}} []qm.QueryMod

func (s queryModSlice{{$EntityName}}) Apply(q *queries.Query) {
    qm.Apply(q, s...)
}

func IsUnsetOptional{{$EntityName}}(o any) bool {
    switch t:= o.(type) {
        case null.JSON:
            return !t.Valid
        case null.Bytes:
            return !t.Valid
        case null.String:
            return !t.Valid
        case null.Byte:
            return !t.Valid
        case null.Float32:
            return !t.Valid
        case null.Float64:
            return !t.Valid
        case null.Int:
            return !t.Valid
        case null.Int8:
            return !t.Valid
        case null.Int16:
            return !t.Valid
        case null.Int32:
            return !t.Valid
        case null.Int64:
            return !t.Valid
        case null.Uint:
            return !t.Valid
        case null.Uint8:
            return !t.Valid
        case null.Uint16:
            return !t.Valid
        case null.Uint32:
            return !t.Valid
        case null.Uint64:
            return !t.Valid
    default:
        return false
    }
}

func TryUnwrapOptional{{$EntityName}}(o any) any {
    switch t:= o.(type) {
        case null.JSON:
            return t.JSON
        case null.Bytes:
            return t.Bytes
        case null.String:
            return t.String
        case null.Byte:
            return t.Byte
        case null.Float32:
            return t.Float32
        case null.Float64:
            return t.Float64
        case null.Int:
            return t.Int
        case null.Int8:
            return t.Int8
        case null.Int16:
            return t.Int16
        case null.Int32:
            return t.Int32
        case null.Int64:
            return t.Int64
        case null.Uint:
            return t.Uint
        case null.Uint8:
            return t.Uint8
        case null.Uint16:
            return t.Uint16
        case null.Uint32:
            return t.Uint32
        case null.Uint64:
            return t.Uint64
    default:
        panic("Unhandleded optional type")
    }
}

func buildQueryModFilter{{$EntityName}}[T any](filterField {{$EntityName}}Field, filterOperation model.FilterOperation[T]) queryModSlice{{$EntityName}} {
    var newQueryMod queryModSlice{{$EntityName}}

    filterOperator := filterOperation.Operator

    switch filterOperator {
    case model.FilterEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterEqual operator")
        }

        if IsUnsetOptional{{$EntityName}}(filterOperand.Operand) {
            newQueryMod = append(newQueryMod, qmhelper.WhereIsNull(strcase.SnakeCase(string(filterField))))
        } else {
            newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" = ?", TryUnwrapOptional{{$EntityName}}(filterOperand.Operand)))
        }
    case model.FilterNEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterNEqual operator")
        }

        if IsUnsetOptional{{$EntityName}}(filterOperand.Operand) {
            newQueryMod = append(newQueryMod, qmhelper.WhereIsNotNull(strcase.SnakeCase(string(filterField))))
        } else {
            newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" != ?", TryUnwrapOptional{{$EntityName}}(filterOperand.Operand)))
        }
    case model.FilterGreaterThan:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterGreaterThan operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" > ?", TryUnwrapOptional{{$EntityName}}(filterOperand.Operand)))
    case model.FilterGreaterThanEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterGreaterThanEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" >= ?", TryUnwrapOptional{{$EntityName}}(filterOperand.Operand)))
    case model.FilterLessThan:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterLessThan operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" < ?", TryUnwrapOptional{{$EntityName}}(filterOperand.Operand)))
    case model.FilterLessThanEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterLessThanEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" <= ?", TryUnwrapOptional{{$EntityName}}(filterOperand.Operand)))
    case model.FilterIn:
        filterOperand, ok := filterOperation.Operand.(model.ListOperand[T])
        if !ok {
            panic("expected a list operand for FilterIn operator")
        }

		whereArgs, _ := goaoi.TransformCopySliceUnsafe(filterOperand.Operands, func(a T) any { return any(a) })

        newQueryMod = append(newQueryMod, qm.WhereIn(strcase.SnakeCase(string(filterField))+" IN ?", whereArgs...))
    case model.FilterNotIn:
        filterOperand, ok := filterOperation.Operand.(model.ListOperand[T])
        if !ok {
            panic("expected a list operand for FilterNotIn operator")
        }

		whereArgs, _ := goaoi.TransformCopySliceUnsafe(filterOperand.Operands, func(a T) any { return any(a) })

        newQueryMod = append(newQueryMod, qm.WhereNotIn(strcase.SnakeCase(string(filterField))+" IN ?", whereArgs...))
    case model.FilterBetween:
        filterOperand, ok := filterOperation.Operand.(model.RangeOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterBetween operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" BETWEEN ? AND ?", filterOperand.Start, filterOperand.End))
    case model.FilterNotBetween:
        filterOperand, ok := filterOperation.Operand.(model.RangeOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterNotBetween operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" NOT BETWEEN ? AND ?", filterOperand.Start, filterOperand.End))
    case model.FilterLike:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterLike operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" LIKE ?", filterOperand.Operand))
    case model.FilterNotLike:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterLike operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(strcase.SnakeCase(string(filterField))+" NOT LIKE ?", filterOperand.Operand))
    case model.FilterOr:
        filterOperand, ok := filterOperation.Operand.(model.CompoundOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterOr operator")
        }
        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.LHS)))
        newQueryMod = append(newQueryMod, qm.Or2(qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.RHS))))
    case model.FilterAnd:
        filterOperand, ok := filterOperation.Operand.(model.CompoundOperand[T])
        if !ok {
            panic("expected a scalar operand for FilterAnd operator")
        }

        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.LHS)))
        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter{{$EntityName}}(filterField, filterOperand.RHS)))
    default:
        panic("Unhandled FilterOperator")
    }

    return newQueryMod
}

func buildQueryModListFromFilter{{$EntityName}}(filter *{{$EntityName}}Filter) queryModSlice{{$EntityName}} {
	queryModList := make(queryModSlice{{$EntityName}}, 0, {{len .StructFields}})

    {{range $field := .StructFields -}}
    if filter.{{.FieldName}}.HasValue {
        newQueryMod := buildQueryModFilter{{$EntityName}}("{{.FieldName}}", filter.{{.FieldName}}.Wrappee)
        queryModList = append(queryModList, newQueryMod...)
    }
    {{end}}

	return queryModList
}


type {{$StructName}}ConstructorArgs struct {
    DB *sql.DB
    Logger *log.Logger
    {{ if ne $EntityName "Tag" }}
    TagRepository repoCommon.TagRepository
    {{ end }}
}

func (repo *{{$StructName}}) New(args any) (newRepo repoCommon.{{$EntityName}}Repository, err error) {
    constructorArgs, ok := args.({{$StructName}}ConstructorArgs)
    if !ok {
        err = fmt.Errorf("expected type %T but got %T", {{$StructName}}ConstructorArgs{}, args)

repo.Logger.Error(err)

return
    }

    repo.db = constructorArgs.DB
    repo.Logger = constructorArgs.Logger
    {{ if ne $EntityName "Tag" }}
    repo.tagRepository = constructorArgs.TagRepository
    {{ end }}

    newRepo = repo

    return
}


//******************************************************************//
//                              Methods                             //
//******************************************************************//
func (repo *{{$StructName}}) Add(ctx context.Context, domainModels []*domain.{{$EntityName}})  (err error){
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var tx *sql.Tx

    tx, err = repo.db.BeginTx(ctx, nil)
    if err != nil {
        repo.Logger.Error(err)

return err
    }


    err = repo.AddMinimal(ctx, domainModels, tx)
    if err != nil {
        repo.Logger.Error(err)

return err
    }

    err = repo.ReplaceTx(ctx, domainModels, tx)
    if err != nil {
        repo.Logger.Error(err)

        return err
    }

    tx.Commit()

    return
}

func (repo *{{$StructName}}) AddMinimal(ctx context.Context, domainModels []*domain.{{$EntityName}}, tx *sql.Tx)  (err error){
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var commitHere bool
    if tx == nil {
        tx, err = repo.db.BeginTx(ctx, nil)
        if err != nil {
repo.Logger.Error(err)

return
        }
        commitHere = true
    }

    var repositoryModels []any
    repositoryModels, err = goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModelMinimalTx(ctx, tx))
	if err != nil {
		return
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

		err = repoModel.Insert(ctx, tx, boil.Infer())
		if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

			return
		}
	}

    if commitHere {
        tx.Commit()
    }

    return
}

func (repo *{{$StructName}}) ReplaceTx(ctx context.Context, domainModels []*domain.{{$EntityName}}, tx *sql.Tx)  (err error){
    {{/* TODO: Handle empty inputs and input containing/being nil values */}}
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var commitHere bool
    if tx == nil {
        tx, err = repo.db.BeginTx(ctx, nil)
        if err != nil {
repo.Logger.Error(err)

return
        }

        commitHere = true
    }

    var repositoryModels []any
    repositoryModels, err = goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModelTx(ctx, tx))
	if err != nil {
		return
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

        var numAffectedRecords int64
		numAffectedRecords, err = repoModel.Update(ctx, tx, boil.Infer())
		if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

			return
		}

        if numAffectedRecords == 0 {
            var doesExist bool
            for _, repository{{$EntityName}} := range repositoryModels {
                doesExist, err = {{$EntityName}}s({{$EntityName}}Where.ID.EQ(repository{{$EntityName}}.(*{{$EntityName}}).ID)).Exists(ctx, tx)
                if err != nil {
                    return err
                }

                if !doesExist {
                    err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
                }
            }
        }

        err = repo.UpdateRelatedEntities(ctx,tx, repositoryModel.(*{{$EntityName}}))
        if err != nil {
            return err
        }

	}

    if commitHere {
    tx.Commit()
    }

    return
}

func (repo *{{$StructName}}) Replace(ctx context.Context, domainModels []*domain.{{$EntityName}})  (err error){
    {{/* TODO: Handle empty inputs and input containing/being nil values */}}
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var repositoryModels []any
    repositoryModels, err = goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return
	}

    var tx *sql.Tx

	tx, err = repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

        var numAffectedRecords int64
		numAffectedRecords, err = repoModel.Update(ctx, tx, boil.Infer())
		if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

			return
		}

        if numAffectedRecords == 0 {
            var doesExist bool
            for _, repository{{$EntityName}} := range repositoryModels {
                doesExist, err = {{$EntityName}}s({{$EntityName}}Where.ID.EQ(repository{{$EntityName}}.(*{{$EntityName}}).ID)).Exists(ctx, tx)
                if err != nil {
                    repo.Logger.Error(err)

return err
                }

                if !doesExist {
                    err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
                }
            }
        }

        err = repo.UpdateRelatedEntities(ctx,tx, repositoryModel.(*{{$EntityName}}))
        if err != nil {
            repo.Logger.Error(err)

return err
        }

	}

	tx.Commit()

    return
}

func (repo *{{$StructName}}) Upsert(ctx context.Context, domainModels []*domain.{{$EntityName}})  (err error){
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var repositoryModels []any
    repositoryModels, err = goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return
	}

    var tx *sql.Tx

	tx, err = repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

        {{ if eq .DatabaseName "mssql" }}
		err = repoModel.Upsert(ctx, tx, boil.Infer(), boil.Infer())
        {{else}}
		err = repoModel.Upsert(ctx, tx, true, []string{}, boil.Infer(), boil.Infer())
        {{end}}
		if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

			return
		}

        err = repo.UpdateRelatedEntities(ctx,tx, repositoryModel.(*{{$EntityName}}))
        if err != nil {
            repo.Logger.Error(err)

return err
        }
	}

	tx.Commit()

    return
}

func (repo *{{$StructName}}) Update(ctx context.Context, domainModels []*domain.{{$EntityName}}, domainColumnUpdater *domain.{{$EntityName}}Updater)  (err error){
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

	if  domainColumnUpdater == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

	if  domainColumnUpdater.IsDefault() {
        err = helper.IneffectiveOperationError{Inner: helper.NopUpdaterError{}}
		repo.Logger.Error(err)

		return
    }

    var repositoryModels []any
    repositoryModels, err = goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return
	}

    var repositoryUpdater any
    repositoryUpdater, err = repo.{{$EntityName}}DomainToRepositoryUpdater(ctx, domainColumnUpdater)
    if err != nil {
repo.Logger.Error(err)

return
    }

    var tx *sql.Tx

   	tx, err = repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

    var numAffectedRecords int64
    for _, repositoryModel := range   repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

        repoUpdater, ok := repositoryUpdater.(*{{$EntityName}}Updater)
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

        repoUpdater.ApplyToModel(repoModel)
        numAffectedRecords, err = repoModel.Update(ctx, tx, boil.Infer())
        if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

repo.Logger.Error(err)

return
        }

        if numAffectedRecords == 0 {
            err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
        }

        err = repo.UpdateRelatedEntities(ctx,tx, repositoryModel.(*{{$EntityName}}))
        if err != nil {
            repo.Logger.Error(err)

return err
        }
    }

    err = tx.Commit()

    return
}

func (repo *{{$StructName}}) UpdateWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter, domainColumnUpdater *domain.{{$EntityName}}Updater) (numAffectedRecords int64, err error) {
	var modelsToUpdate {{$EntityName}}Slice

	if  domainColumnFilter == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

	if  domainColumnUpdater == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

	if  domainColumnUpdater.IsDefault() {
        err = helper.IneffectiveOperationError{Inner: helper.NopUpdaterError{}}
		repo.Logger.Error(err)

		return
    }

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    var repositoryUpdater any
    repositoryUpdater, err = repo.{{$EntityName}}DomainToRepositoryUpdater(ctx, domainColumnUpdater)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoUpdater, ok := repositoryUpdater.(*{{$EntityName}}Updater)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Updater but got %T", repoUpdater)

repo.Logger.Error(err)

return
    }


    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }



	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

	modelsToUpdate, err = {{$EntityName}}s(queryFilters...).All(ctx, repo.db)
	if err != nil {
		return
	}

    if len(modelsToUpdate) == 0 {
        err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
    }

    var tx *sql.Tx

	tx, err = repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

    for _, repoModel := range modelsToUpdate {
        repoUpdater.ApplyToModel(repoModel)
        _, err = repoModel.Update(ctx, tx, boil.Infer())
        if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

repo.Logger.Error(err)

return
        }

        err = repo.UpdateRelatedEntities(ctx,tx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }

    }

    tx.Commit()

    numAffectedRecords = int64(len(modelsToUpdate))

    return
}

func (repo *{{$StructName}}) Delete(ctx context.Context, domainModels []*domain.{{$EntityName}})  (err error){
    if len(domainModels) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

	err = goaoi.AnyOfSlice(domainModels, func (e *domain.{{$EntityName}}) bool {return e == nil || e.IsDefault()})
	if err == nil{
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var repositoryModels []any
    repositoryModels, err = goaoi.TransformCopySlice(domainModels, repo.Get{{$EntityName}}DomainToRepositoryModel(ctx))
	if err != nil {
		return
	}

    var tx *sql.Tx

	tx, err = repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

    var numAffectedRecords int64

	for _, repositoryModel := range repositoryModels {
        repoModel, ok := repositoryModel.(*{{$EntityName}})
        if !ok {
            err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
        }

		numAffectedRecords, err = repoModel.Delete(ctx, tx)
		if err != nil {
			return
		}

        if numAffectedRecords == 0 {
            err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
        }

        err = repo.UpdateRelatedEntities(ctx,tx, repositoryModel.(*{{$EntityName}}))
        if err != nil {
            repo.Logger.Error(err)

return err
        }
	}

	tx.Commit()

    return
}

func (repo *{{$StructName}}) DeleteWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (numAffectedRecords int64, err error) {
	if  domainColumnFilter == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }



	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

    var tx *sql.Tx

	tx, err = repo.db.BeginTx(ctx, nil)
	if err != nil {
		return
	}

	numAffectedRecords, err = {{$EntityName}}s(queryFilters...).DeleteAll(ctx, tx)

    tx.Commit()

    return
}

func (repo *{{$StructName}}) CountWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (numRecords int64, err error) {
	if  domainColumnFilter == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }



	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

	return {{$EntityName}}s(queryFilters...).Count(ctx, repo.db)
}

func (repo *{{$StructName}}) CountAll(ctx context.Context) (numRecords int64, err error) {
	return {{$EntityName}}s().Count(ctx, repo.db)
}

func (repo *{{$StructName}}) DoesExist(ctx context.Context, domainModel *domain.{{$EntityName}}) (doesExist bool, err error) {
	if domainModel == nil {
        err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
	}

    var repositoryModel any
    repositoryModel, err = repo.{{$EntityName}}DomainToRepositoryModel(ctx, domainModel)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoModel, ok := repositoryModel.(*{{$EntityName}})
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}} but got %T", repoModel)

repo.Logger.Error(err)

return
    }


	return {{$EntityName}}Exists(ctx, repo.db, repoModel.ID)
}

func (repo *{{$StructName}}) DoesExistWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (doesExist bool, err error) {
	if  domainColumnFilter == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }



	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

	return {{$EntityName}}s(queryFilters...).Exists(ctx, repo.db)
}

func (repo *{{$StructName}}) GetWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (records []*domain.{{$EntityName}}, err error) {
	if  domainColumnFilter == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }




	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

    var repositoryModels {{$EntityName}}Slice
    repositoryModels, err = {{$EntityName}}s(queryFilters...).All(ctx, repo.db)
    if err != nil {
repo.Logger.Error(err)

return
    }

    if len(repositoryModels) == 0 {
    err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
    }


    tx, err := repo.db.BeginTx(ctx, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    for _, repoModel := range repositoryModels {
        err = repo.LoadEntityRelations(ctx, tx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }
    }

    err = tx.Commit()
    if err != nil {
repo.Logger.Error(err)

return
    }

    records = make([]*domain.{{$EntityName}}, 0, len(repositoryModels))

    var domainModel *domain.{{$EntityName}}
    for _, repoModel := range repositoryModels {
        domainModel, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }

        records = append(records, domainModel)
    }

    return
}

func (repo *{{$StructName}}) GetFirstWhere(ctx context.Context, domainColumnFilter *domain.{{$EntityName}}Filter) (record *domain.{{$EntityName}}, err error) {
	if  domainColumnFilter == nil {
		err = helper.NilInputError{}
		repo.Logger.Error(err)

		return
    }

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, domainColumnFilter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err =  fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }



	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

    var repositoryModel *{{$EntityName}}
    repositoryModel, err = {{$EntityName}}s(queryFilters...).One(ctx, repo.db)
    if err != nil {
        if  errors.Is(err, sql.ErrNoRows){
            err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}
        }

repo.Logger.Error(err)

return
    }


    tx, err := repo.db.BeginTx(ctx, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = repo.LoadEntityRelations(ctx, tx, repositoryModel)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = tx.Commit()
    if err != nil {
repo.Logger.Error(err)

return
    }

    record , err =repo.{{$EntityName}}RepositoryToDomainModel(ctx, repositoryModel)

    return
}

func (repo *{{$StructName}}) GetAll(ctx context.Context) (records []*domain.{{$EntityName}}, err error) {
    var repositoryModels {{$EntityName}}Slice
    repositoryModels, err = {{$EntityName}}s().All(ctx, repo.db)
    if err != nil {
repo.Logger.Error(err)

return
    }
    if len(repositoryModels) == 0 {
        err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
    }

    tx, err := repo.db.BeginTx(ctx, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    for _, repoModel := range repositoryModels {
        err = repo.LoadEntityRelations(ctx, tx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }
    }

    err = tx.Commit()
    if err != nil {
repo.Logger.Error(err)

return
    }

    records = make([]*domain.{{$EntityName}}, 0, len(repositoryModels))

    var domainModel *domain.{{$EntityName}}
    for _, repoModel := range repositoryModels {
        domainModel, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }

        records = append(records, domainModel)
    }

    return
}

func (repo *{{$StructName}}) GetFromIDs(ctx context.Context, IDs []int64) (records []*domain.{{$EntityName}}, err error) {
    filter := &domain.{{$EntityName}}Filter{ID: optional.Make(model.FilterOperation[int64]{Operand: model.ListOperand[int64]{IDs}, Operator: model.FilterIn})}

    var repositoryFilter any
    repositoryFilter, err = repo.{{$EntityName}}DomainToRepositoryFilter(ctx, filter)
    if err != nil {
repo.Logger.Error(err)

return
    }

    repoFilter, ok := repositoryFilter.(*{{$EntityName}}Filter)
    if !ok {
        err = fmt.Errorf("expected type *{{$EntityName}}Filter but got %T", repoFilter)

repo.Logger.Error(err)

return
    }




	queryFilters := buildQueryModListFromFilter{{$EntityName}}(repoFilter)

    var repositoryModels {{$EntityName}}Slice
    repositoryModels, err = {{$EntityName}}s(queryFilters...).All(ctx, repo.db)
    if err != nil {
repo.Logger.Error(err)

return
    }

    if len(repositoryModels) == 0 {
    err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
    }

    tx, err := repo.db.BeginTx(ctx, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    for _, repoModel := range repositoryModels {
        err = repo.LoadEntityRelations(ctx, tx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }
    }

    err = tx.Commit()
    if err != nil {
repo.Logger.Error(err)

return
    }

    records = make([]*domain.{{$EntityName}}, 0, len(repositoryModels))

    var domainModel *domain.{{$EntityName}}
    for _, repoModel := range repositoryModels {
        domainModel, err = repo.{{$EntityName}}RepositoryToDomainModel(ctx, repoModel)
        if err != nil {
repo.Logger.Error(err)

return
        }

        records = append(records, domainModel)
    }

    return
}

{{ if ne $EntityName "Tag" }}
func (repo *{{$StructName}}) AddType(ctx context.Context, types []string)  (err error){
    if len(types) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

    for _, type_ := range types {
        repositoryModel := {{$EntityName}}Type{{"{"}}{{$EntityName}}Type: type_}

        err = repositoryModel.Insert(ctx, repo.db, boil.Infer())
        if err != nil {
            if strings.Contains(err.Error(), "UNIQUE") {
                err = helper.DuplicateInsertionError{Inner: err}
            }

repo.Logger.Error(err)

return
        }
    }

    return
}

func (repo *{{$StructName}}) DeleteType(ctx context.Context, types []string)  (err error){
    if len(types) == 0 {
        repo.Logger.Debug(helper.LogMessageEmptyInput)

        err = helper.IneffectiveOperationError{Inner: helper.EmptyInputError{}}

repo.Logger.Error(err)

return
    }

    var numAffectedRecords int64

    numAffectedRecords, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.IN(types)).DeleteAll(ctx, repo.db)
    if numAffectedRecords == 0 {
        err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
    }

	return
}

func (repo *{{$StructName}}) UpdateType(ctx context.Context, oldType string, newType string)  (err error){
    var repositoryModel *{{$EntityName}}Type
    repositoryModel, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(oldType)).One(ctx, repo.db)
    if err != nil {
        if  errors.Is(err, sql.ErrNoRows){
            err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}
        }

repo.Logger.Error(err)

return
    }

    repositoryModel.{{$EntityName}}Type = newType

    var numAffectedRecords int64
    numAffectedRecords, err = repositoryModel.Update(ctx, repo.db, boil.Infer())
    if err != nil {
        if strings.Contains(err.Error(), "UNIQUE") {
            err = helper.DuplicateInsertionError{Inner: err}

repo.Logger.Error(err)

return
        }
    }

    if numAffectedRecords == 0 {
        var doesExist bool
        doesExist, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(oldType)).Exists(ctx, repo.db)
        if err != nil {
            repo.Logger.Error(err)

return err
        }

        if !doesExist {
            err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
        }
    }

    return
}

func (repo *{{$StructName}}) GetAllTypes(ctx context.Context) (records []string, err error) {
    var repositoryModels []*{{$EntityName}}Type
    repositoryModels, err = {{$EntityName}}Types().All(ctx, repo.db)
    if err != nil {
repo.Logger.Error(err)

return
    }
    if len(repositoryModels) == 0 {
        err = helper.IneffectiveOperationError{Inner: helper.NonExistentPrimaryDataError{}}

repo.Logger.Error(err)

return
    }


    return goaoi.TransformCopySliceUnsafe(repositoryModels, func(m *{{$EntityName}}Type) string {return m.{{$EntityName}}Type})
}


func (repo *{{$StructName}}) GetTagRepository() repoCommon.TagRepository {
    return repo.tagRepository
}
{{ end }}


//******************************************************************//
//                            Converters                            //
//******************************************************************//
func (repo *{{$StructName}}) Get{{$EntityName}}DomainToRepositoryModel(ctx context.Context) func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
    return func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
        return repo.{{$EntityName}}DomainToRepositoryModel(ctx, domainModel)
    }
}

func (repo *{{$StructName}}) Get{{$EntityName}}RepositoryToDomainModel(ctx context.Context) func(repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    return func(repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {

        return repo.{{$EntityName}}RepositoryToDomainModel(ctx,repositoryModel)
    }
}

func (repo *{{$StructName}}) Get{{$EntityName}}DomainToRepositoryModelMinimal(ctx context.Context) func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
    return func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
        return repo.{{$EntityName}}DomainToRepositoryModelMinimal(ctx, domainModel)
    }
}

func (repo *{{$StructName}}) Get{{$EntityName}}DomainToRepositoryModelTx(ctx context.Context, tx *sql.Tx) func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
    return func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
        return repo.{{$EntityName}}DomainToRepositoryModelTx(ctx, tx, domainModel)
    }
}

func (repo *{{$StructName}}) Get{{$EntityName}}RepositoryToDomainModelTx(ctx context.Context, tx *sql.Tx) func(repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    return func(repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {

        return repo.{{$EntityName}}RepositoryToDomainModelTx(ctx, tx,repositoryModel)
    }
}

func (repo *{{$StructName}}) Get{{$EntityName}}DomainToRepositoryModelMinimalTx(ctx context.Context, tx *sql.Tx) func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
    return func(domainModel *domain.{{$EntityName}}) (repositoryModel any, err error) {
        return repo.{{$EntityName}}DomainToRepositoryModelMinimalTx(ctx, tx, domainModel)
    }
}

//******************************************************************//
//                          Model Converter                         //
//******************************************************************//
{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModel(ctx context.Context, domainModel *domain.{{$EntityName}}) ( repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.URL = domainModel.URL
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainModel.Title.HasValue {
        repositoryModelConcrete.Title.Valid = true
        repositoryModelConcrete.Title.String = domainModel.Title.Wrappee
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainModel.IsRead {
        repositoryModelConcrete.IsRead = 1
    }

    if domainModel.IsCollection {
        repositoryModelConcrete.IsCollection = 1
    }

    //*************************    Set Tags    *************************//
    var repositoryTag *Tag

    if domainModel.TagIDs != nil {
        for _,  domainTagID := range domainModel.TagIDs {
            repositoryTag, err = Tags(TagWhere.ID.EQ(domainTagID)).One(ctx, repo.db)
            if err != nil {
                err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

repo.Logger.Error(err)

return
            }

            repositoryModelConcrete.R.Tags = append(repositoryModelConcrete.R.Tags, &Tag{{"{"}}Tag: repositoryTag.Tag, ID: repositoryTag.ID})
        }
    }


    //*************************    Set Type    *************************//
	if domainModel.{{$EntityName}}Type.HasValue {
        var repository{{$EntityName}}Type *{{$EntityName}}Type

        repositoryModelConcrete.R.{{$EntityName}}Type = &{{$EntityName}}Type{{"{"}}{{$EntityName}}Type: domainModel.{{$EntityName}}Type.Wrappee}
		repository{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainModel.{{$EntityName}}Type.Wrappee)).One(ctx, repo.db)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

        if repository{{$EntityName}}Type != nil {
            repositoryModelConcrete.{{$EntityName}}TypeID = null.NewInt64(repository{{$EntityName}}Type.ID, true)
            repositoryModelConcrete.R.{{$EntityName}}Type.ID = repository{{$EntityName}}Type.ID
        } else {
            repositoryModelConcrete.R.{{$EntityName}}Type = nil
        }
	}

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelMinimal(ctx context.Context, domainModel *domain.{{$EntityName}}) ( repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.URL = domainModel.URL
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainModel.Title.HasValue {
        repositoryModelConcrete.Title.Valid = true
        repositoryModelConcrete.Title.String = domainModel.Title.Wrappee
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainModel.IsRead {
        repositoryModelConcrete.IsRead = 1
    }

    if domainModel.IsCollection {
        repositoryModelConcrete.IsCollection = 1
    }

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModel(ctx context.Context, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.(*{{$EntityName}})

    domainModel.URL = repositoryModelConcrete.URL
    domainModel.ID = repositoryModelConcrete.ID
    {{/* TODO: Handle slices being nil and containing nil values */}}

    if repositoryModelConcrete.R == nil {
        repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()
    }

    if repositoryModelConcrete.R.{{$EntityName}}Type != nil {
        domainModel.{{$EntityName}}Type = optional.Make(repositoryModelConcrete.R.{{$EntityName}}Type.{{$EntityName}}Type)
    }

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    domainModel.CreatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.CreatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    domainModel.UpdatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.UpdatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    if repositoryModelConcrete.DeletedAt.Valid {
        var t time.Time

        t, err = time.Parse(helper.DateFormat, repositoryModelConcrete.DeletedAt.String)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.DeletedAt.Set(t)
    }
    {{else}}
    domainModel.CreatedAt = repositoryModelConcrete.CreatedAt
    domainModel.UpdatedAt = repositoryModelConcrete.UpdatedAt

    if repositoryModelConcrete.DeletedAt.Valid {
        domainModel.DeletedAt.Set(repositoryModelConcrete.DeletedAt.Time)
    }
    {{end}}

    //*************************    Set Title    ************************//
    if repositoryModelConcrete.Title.Valid {
        domainModel.Title.Set(repositoryModelConcrete.Title.String)
    }

    //******************    Set IsRead/IsCollection    *****************//
    domainModel.IsRead = repositoryModelConcrete.IsRead > 0
    domainModel.IsCollection = repositoryModelConcrete.IsCollection > 0

    //*************************    Set Tags    *************************//
    domainModel.TagIDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.Tags, func (t *Tag) int64 {return t.ID;})

    return
}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModel(ctx context.Context, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.Path = domainModel.Path
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}

    //*************************    Set Tags    *************************//
    var repositoryTag *Tag

	for _, modelTagID := range domainModel.TagIDs {
		repositoryTag, err = Tags(TagWhere.ID.EQ(modelTagID)).One(ctx, repo.db)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

		repositoryModelConcrete.R.Tags  = append(repositoryModelConcrete.R.Tags,repositoryTag)
	}

    //*************************    Set Type    *************************//
    var repository{{$EntityName}}Type *{{$EntityName}}Type

	if domainModel.{{$EntityName}}Type.HasValue {
        repositoryModelConcrete.R.{{$EntityName}}Type = &{{$EntityName}}Type{{"{"}}{{$EntityName}}Type: domainModel.{{$EntityName}}Type.Wrappee}
		repository{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainModel.{{$EntityName}}Type.Wrappee)).One(ctx, repo.db)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

        if repository{{$EntityName}}Type != nil {
            repositoryModelConcrete.{{$EntityName}}TypeID = null.NewInt64(repository{{$EntityName}}Type.ID, true)
            repositoryModelConcrete.R.{{$EntityName}}Type.ID = repository{{$EntityName}}Type.ID
        } else {
            repositoryModelConcrete.R.{{$EntityName}}Type = nil
        }
	}


    //**************    Set linked/backlinked documents    *************//
    var repository{{$EntityName}}Raw any

    for _ , link := range domainModel.Linked{{$EntityName}}IDs {
        repository{{$EntityName}}Raw, err = Documents(DocumentWhere.ID.EQ(link)).One(ctx, repo.db)
        if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.R.Destination{{$EntityName}}s = append(repositoryModelConcrete.R.Destination{{$EntityName}}s, repository{{$EntityName}}Raw.(*{{$EntityName}}))
    }

    for _ , backlink := range domainModel.Backlinked{{$EntityName}}sIDs {
        repository{{$EntityName}}Raw, err = Documents(DocumentWhere.ID.EQ(backlink)).One(ctx, repo.db)
        if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.R.Source{{$EntityName}}s = append(repositoryModelConcrete.R.Source{{$EntityName}}s, repository{{$EntityName}}Raw.(*{{$EntityName}}))
    }

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelMinimal(ctx context.Context, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.Path = domainModel.Path
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModel(ctx context.Context, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.(*{{$EntityName}})

    domainModel.Path = repositoryModelConcrete.Path
    domainModel.ID = repositoryModelConcrete.ID

    if repositoryModelConcrete.R == nil {
        repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()
    }

    if repositoryModelConcrete.R.{{$EntityName}}Type != nil {
        domainModel.{{$EntityName}}Type = optional.Make(repositoryModelConcrete.R.{{$EntityName}}Type.{{$EntityName}}Type)
    }

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    domainModel.CreatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.CreatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    domainModel.UpdatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.UpdatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    var t time.Time

    if repositoryModelConcrete.DeletedAt.Valid {
        t, err = time.Parse(helper.DateFormat, repositoryModelConcrete.DeletedAt.String)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.DeletedAt.Set(t)
    }
    {{else}}
    domainModel.CreatedAt = repositoryModelConcrete.CreatedAt
    domainModel.UpdatedAt = repositoryModelConcrete.UpdatedAt

    if repositoryModelConcrete.DeletedAt.Valid {
        domainModel.DeletedAt.Set(repositoryModelConcrete.DeletedAt.Time)
    }
    {{end}}

    //*************************    Set Tags    *************************//
    if len(repositoryModelConcrete.R.Tags) > 0 {
        domainModel.TagIDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.Tags, func (t *Tag) int64 {return t.ID;})
    }

    //**************    Set linked/backlinked documents    *************//

    if len(repositoryModelConcrete.R.DestinationDocuments) > 0 {
        domainModel.Linked{{$EntityName}}IDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.DestinationDocuments, func (d *Document) int64 {return d.ID;})
    }
    if len(repositoryModelConcrete.R.SourceDocuments) > 0 {
        domainModel.Backlinked{{$EntityName}}sIDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.SourceDocuments, func (d *Document) int64 {return d.ID;})
    }

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModel(ctx context.Context, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {

    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.ID = domainModel.ID
    repositoryModelConcrete.{{$EntityName}} = domainModel.{{$EntityName}}


//***********************    Set Parent{{$EntityName}}    **********************//
   	if len(domainModel.ParentPathIDs) > 0 {
		var repositoryParentTag *Tag

		domainParentTagID := domainModel.ParentPathIDs[len(domainModel.ParentPathIDs)-1]
		repositoryParentTag, err = Tags(TagWhere.ID.EQ(domainParentTagID)).One(ctx, repo.db)
		if err != nil {
			err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

		repositoryModelConcrete.ParentTag = null.NewInt64(repositoryParentTag.ID, true)
		repositoryModelConcrete.R.ParentTagTag =repositoryParentTag
	}
//*************************    Set Path    *************************//
	if len(domainModel.ParentPathIDs) > 0 {
		var repositoryParentTag *Tag
		for _, tagID := range domainModel.ParentPathIDs[:len(domainModel.ParentPathIDs)] {
			repositoryParentTag, err = Tags(TagWhere.ID.EQ(tagID)).One(ctx, repo.db)
			if err != nil {
				err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

				return
			}
			repositoryModelConcrete.Path += strconv.FormatInt(repositoryParentTag.ID, 10) + ";"

			repositoryModelConcrete.R.ParentTagTags = append(repositoryModelConcrete.R.ParentTagTags, repositoryParentTag)
		}
	}

	repositoryModelConcrete.Path += strconv.FormatInt(domainModel.ID, 10)
//************************    Set Children  ************************//
	if len(domainModel.SubtagIDs) > 0 {
		var repositoryChildTag *Tag
		for _, tagID := range domainModel.SubtagIDs[:len(domainModel.SubtagIDs)-1] {
			repositoryChildTag, err = Tags(TagWhere.ID.EQ(tagID)).One(ctx, repo.db)
			if err != nil {
				err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

				return
			}

			repositoryModelConcrete.Children += strconv.FormatInt(repositoryChildTag.ID, 10) + ";"
		}
		lastChildID := domainModel.SubtagIDs[len(domainModel.SubtagIDs)-1]
		repositoryChildTag, err = Tags(TagWhere.ID.EQ(lastChildID)).One(ctx, repo.db)
		if err != nil {
			err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}
        repositoryModelConcrete.Children += strconv.FormatInt(repositoryChildTag.ID, 10)
    }



    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelMinimal(ctx context.Context, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {

    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.ID = domainModel.ID
    repositoryModelConcrete.{{$EntityName}} = domainModel.{{$EntityName}}

	repositoryModelConcrete.Path = strconv.FormatInt(domainModel.ID, 10)


    repositoryModel = repositoryModelConcrete

    return
}

// TODO: These functions should be context aware
func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModel(ctx context.Context, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.(*{{$EntityName}})

    domainModel.ID = repositoryModelConcrete.ID
    domainModel.{{$EntityName}} = repositoryModelConcrete.{{$EntityName}}

//***********************    Set ParentPath    **********************//
var parent{{$EntityName}}ID int64

if len(repositoryModelConcrete.Path) > 0 {
    pathIDs :=strings.Split(repositoryModelConcrete.Path, ";")
    pathIDs = pathIDs[:len(pathIDs) -1]
    for _, parent{{$EntityName}}IDRaw := range pathIDs {
        parent{{$EntityName}}ID, err = strconv.ParseInt(parent{{$EntityName}}IDRaw, 10, 64)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.ParentPathIDs = append(domainModel.ParentPathIDs, parent{{$EntityName}}ID)
    }
}

//************************    Set Subtags ************************//
var child{{$EntityName}}ID int64

if len(repositoryModelConcrete.Children) > 0 {
    for _, child{{$EntityName}}IDRaw := range strings.Split(repositoryModelConcrete.Children, ";"){
        child{{$EntityName}}ID, err = strconv.ParseInt(child{{$EntityName}}IDRaw, 10, 64)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.SubtagIDs = append(domainModel.SubtagIDs, child{{$EntityName}}ID)
    }
}

    repositoryModel = repositoryModelConcrete

    return
}
{{end}}

{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelTx(ctx context.Context, tx *sql.Tx, domainModel *domain.{{$EntityName}}) ( repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.URL = domainModel.URL
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainModel.Title.HasValue {
        repositoryModelConcrete.Title.Valid = true
        repositoryModelConcrete.Title.String = domainModel.Title.Wrappee
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainModel.IsRead {
        repositoryModelConcrete.IsRead = 1
    }

    if domainModel.IsCollection {
        repositoryModelConcrete.IsCollection = 1
    }

    //*************************    Set Tags    *************************//
    var repositoryTag *Tag

    if domainModel.TagIDs != nil {
        for _,  domainTagID := range domainModel.TagIDs {
            repositoryTag, err = Tags(TagWhere.ID.EQ(domainTagID)).One(ctx, tx)
            if err != nil {
                err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

repo.Logger.Error(err)

return
            }

            repositoryModelConcrete.R.Tags = append(repositoryModelConcrete.R.Tags, &Tag{{"{"}}Tag: repositoryTag.Tag, ID: repositoryTag.ID})
        }
    }


    //*************************    Set Type    *************************//
	if domainModel.{{$EntityName}}Type.HasValue {
        var repository{{$EntityName}}Type *{{$EntityName}}Type

        repositoryModelConcrete.R.{{$EntityName}}Type = &{{$EntityName}}Type{{"{"}}{{$EntityName}}Type: domainModel.{{$EntityName}}Type.Wrappee}
		repository{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainModel.{{$EntityName}}Type.Wrappee)).One(ctx, tx)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

        if repository{{$EntityName}}Type != nil {
            repositoryModelConcrete.{{$EntityName}}TypeID = null.NewInt64(repository{{$EntityName}}Type.ID, true)
            repositoryModelConcrete.R.{{$EntityName}}Type.ID = repository{{$EntityName}}Type.ID
        } else {
            repositoryModelConcrete.R.{{$EntityName}}Type = nil
        }
	}

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelMinimalTx(ctx context.Context, tx *sql.Tx, domainModel *domain.{{$EntityName}}) ( repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.URL = domainModel.URL
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainModel.Title.HasValue {
        repositoryModelConcrete.Title.Valid = true
        repositoryModelConcrete.Title.String = domainModel.Title.Wrappee
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainModel.IsRead {
        repositoryModelConcrete.IsRead = 1
    }

    if domainModel.IsCollection {
        repositoryModelConcrete.IsCollection = 1
    }

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModelTx(ctx context.Context, tx *sql.Tx, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.(*{{$EntityName}})

    domainModel.URL = repositoryModelConcrete.URL
    domainModel.ID = repositoryModelConcrete.ID
    {{/* TODO: Handle slices being nil and containing nil values */}}

    if repositoryModelConcrete.R == nil {
        repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()
    }

    if repositoryModelConcrete.R.{{$EntityName}}Type != nil {
        domainModel.{{$EntityName}}Type = optional.Make(repositoryModelConcrete.R.{{$EntityName}}Type.{{$EntityName}}Type)
    }

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    domainModel.CreatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.CreatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    domainModel.UpdatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.UpdatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    if repositoryModelConcrete.DeletedAt.Valid {
        var t time.Time

        t, err = time.Parse(helper.DateFormat, repositoryModelConcrete.DeletedAt.String)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.DeletedAt.Set(t)
    }
    {{else}}
    domainModel.CreatedAt = repositoryModelConcrete.CreatedAt
    domainModel.UpdatedAt = repositoryModelConcrete.UpdatedAt

    if repositoryModelConcrete.DeletedAt.Valid {
        domainModel.DeletedAt.Set(repositoryModelConcrete.DeletedAt.Time)
    }
    {{end}}

    //*************************    Set Title    ************************//
    if repositoryModelConcrete.Title.Valid {
        domainModel.Title.Set(repositoryModelConcrete.Title.String)
    }

    //******************    Set IsRead/IsCollection    *****************//
    domainModel.IsRead = repositoryModelConcrete.IsRead > 0
    domainModel.IsCollection = repositoryModelConcrete.IsCollection > 0

    //*************************    Set Tags    *************************//
    domainModel.TagIDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.Tags, func (t *Tag) int64 {return t.ID;})

    return
}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelTx(ctx context.Context, tx *sql.Tx, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.Path = domainModel.Path
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}

    //*************************    Set Tags    *************************//
    var repositoryTag *Tag

	for _, modelTagID := range domainModel.TagIDs {
		repositoryTag, err = Tags(TagWhere.ID.EQ(modelTagID)).One(ctx, tx)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

		repositoryModelConcrete.R.Tags  = append(repositoryModelConcrete.R.Tags,repositoryTag)
	}

    //*************************    Set Type    *************************//
    var repository{{$EntityName}}Type *{{$EntityName}}Type

	if domainModel.{{$EntityName}}Type.HasValue {
        repositoryModelConcrete.R.{{$EntityName}}Type = &{{$EntityName}}Type{{"{"}}{{$EntityName}}Type: domainModel.{{$EntityName}}Type.Wrappee}
		repository{{$EntityName}}Type, err = {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(domainModel.{{$EntityName}}Type.Wrappee)).One(ctx, tx)
		if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

        if repository{{$EntityName}}Type != nil {
            repositoryModelConcrete.{{$EntityName}}TypeID = null.NewInt64(repository{{$EntityName}}Type.ID, true)
            repositoryModelConcrete.R.{{$EntityName}}Type.ID = repository{{$EntityName}}Type.ID
        } else {
            repositoryModelConcrete.R.{{$EntityName}}Type = nil
        }
	}


    //**************    Set linked/backlinked documents    *************//
    var repository{{$EntityName}}Raw any

    for _ , link := range domainModel.Linked{{$EntityName}}IDs {
        repository{{$EntityName}}Raw, err = Documents(DocumentWhere.ID.EQ(link)).One(ctx, tx)
        if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.R.Destination{{$EntityName}}s = append(repositoryModelConcrete.R.Destination{{$EntityName}}s, repository{{$EntityName}}Raw.(*{{$EntityName}}))
    }

    for _ , backlink := range domainModel.Backlinked{{$EntityName}}sIDs {
        repository{{$EntityName}}Raw, err = Documents(DocumentWhere.ID.EQ(backlink)).One(ctx, tx)
        if err != nil {
            err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.R.Source{{$EntityName}}s = append(repositoryModelConcrete.R.Source{{$EntityName}}s, repository{{$EntityName}}Raw.(*{{$EntityName}}))
    }

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelMinimalTx(ctx context.Context, tx *sql.Tx, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {
    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.Path = domainModel.Path
    repositoryModelConcrete.ID = domainModel.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt.Format(helper.DateFormat)
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt.Format(helper.DateFormat)

    if domainModel.DeletedAt.HasValue {
        repositoryModelConcrete.DeletedAt.Valid = true
        repositoryModelConcrete.DeletedAt.String = domainModel.DeletedAt.Wrappee.Format(helper.DateFormat)
    }
    {{else}}
    repositoryModelConcrete.CreatedAt = domainModel.CreatedAt
    repositoryModelConcrete.UpdatedAt = domainModel.UpdatedAt

    if domainModel.DeletedAt.HasValue {
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainModel.DeletedAt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryModelConcrete.DeletedAt = convertedTime
    }
    {{end}}

    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModelTx(ctx context.Context, tx *sql.Tx, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.(*{{$EntityName}})

    domainModel.Path = repositoryModelConcrete.Path
    domainModel.ID = repositoryModelConcrete.ID

    if repositoryModelConcrete.R == nil {
        repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()
    }

    if repositoryModelConcrete.R.{{$EntityName}}Type != nil {
        domainModel.{{$EntityName}}Type = optional.Make(repositoryModelConcrete.R.{{$EntityName}}Type.{{$EntityName}}Type)
    }

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    domainModel.CreatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.CreatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    domainModel.UpdatedAt, err = time.Parse(helper.DateFormat, repositoryModelConcrete.UpdatedAt)
    if err != nil {
repo.Logger.Error(err)

return
    }

    var t time.Time

    if repositoryModelConcrete.DeletedAt.Valid {
        t, err = time.Parse(helper.DateFormat, repositoryModelConcrete.DeletedAt.String)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.DeletedAt.Set(t)
    }
    {{else}}
    domainModel.CreatedAt = repositoryModelConcrete.CreatedAt
    domainModel.UpdatedAt = repositoryModelConcrete.UpdatedAt

    if repositoryModelConcrete.DeletedAt.Valid {
        domainModel.DeletedAt.Set(repositoryModelConcrete.DeletedAt.Time)
    }
    {{end}}

    //*************************    Set Tags    *************************//
    if len(repositoryModelConcrete.R.Tags) > 0 {
        domainModel.TagIDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.Tags, func (t *Tag) int64 {return t.ID;})
    }

    //**************    Set linked/backlinked documents    *************//

    if len(repositoryModelConcrete.R.DestinationDocuments) > 0 {
        domainModel.Linked{{$EntityName}}IDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.DestinationDocuments, func (d *Document) int64 {return d.ID;})
    }
    if len(repositoryModelConcrete.R.SourceDocuments) > 0 {
        domainModel.Backlinked{{$EntityName}}sIDs, _ = goaoi.TransformCopySliceUnsafe(repositoryModelConcrete.R.SourceDocuments, func (d *Document) int64 {return d.ID;})
    }

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelTx(ctx context.Context, tx *sql.Tx, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {

    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.ID = domainModel.ID
    repositoryModelConcrete.{{$EntityName}} = domainModel.{{$EntityName}}


//***********************    Set Parent{{$EntityName}}    **********************//
   	if len(domainModel.ParentPathIDs) > 0 {
		var repositoryParentTag *Tag

		domainParentTagID := domainModel.ParentPathIDs[len(domainModel.ParentPathIDs)-1]
		repositoryParentTag, err = Tags(TagWhere.ID.EQ(domainParentTagID)).One(ctx, tx)
		if err != nil {
			err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}

		repositoryModelConcrete.ParentTag = null.NewInt64(repositoryParentTag.ID, true)
		repositoryModelConcrete.R.ParentTagTag =repositoryParentTag
	}
//*************************    Set Path    *************************//
	if len(domainModel.ParentPathIDs) > 0 {
		var repositoryParentTag *Tag
		for _, tagID := range domainModel.ParentPathIDs[:len(domainModel.ParentPathIDs)] {
			repositoryParentTag, err = Tags(TagWhere.ID.EQ(tagID)).One(ctx, tx)
			if err != nil {
				err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

				return
			}
			repositoryModelConcrete.Path += strconv.FormatInt(repositoryParentTag.ID, 10) + ";"

			repositoryModelConcrete.R.ParentTagTags = append(repositoryModelConcrete.R.ParentTagTags, repositoryParentTag)
		}
	}

	repositoryModelConcrete.Path += strconv.FormatInt(domainModel.ID, 10)
//************************    Set Children  ************************//
	if len(domainModel.SubtagIDs) > 0 {
		var repositoryChildTag *Tag
		for _, tagID := range domainModel.SubtagIDs[:len(domainModel.SubtagIDs)-1] {
			repositoryChildTag, err = Tags(TagWhere.ID.EQ(tagID)).One(ctx, tx)
			if err != nil {
				err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

				return
			}

			repositoryModelConcrete.Children += strconv.FormatInt(repositoryChildTag.ID, 10) + ";"
		}
		lastChildID := domainModel.SubtagIDs[len(domainModel.SubtagIDs)-1]
		repositoryChildTag, err = Tags(TagWhere.ID.EQ(lastChildID)).One(ctx, tx)
		if err != nil {
			err = repoCommon.ReferenceToNonExistentDependencyError{Inner: err}

			return
		}
        repositoryModelConcrete.Children += strconv.FormatInt(repositoryChildTag.ID, 10)
    }



    repositoryModel = repositoryModelConcrete

    return
}

func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryModelMinimalTx(ctx context.Context, tx *sql.Tx, domainModel *domain.{{$EntityName}}) (repositoryModel any, err error)  {

    repositoryModelConcrete := new({{$EntityName}})
    repositoryModelConcrete.R = repositoryModelConcrete.R.NewStruct()

    repositoryModelConcrete.ID = domainModel.ID
    repositoryModelConcrete.{{$EntityName}} = domainModel.{{$EntityName}}

	repositoryModelConcrete.Path = strconv.FormatInt(domainModel.ID, 10)


    repositoryModel = repositoryModelConcrete

    return
}

// TODO: These functions should be context aware
func (repo *{{$StructName}}) {{$EntityName}}RepositoryToDomainModelTx(ctx context.Context, tx *sql.Tx, repositoryModel any) (domainModel *domain.{{$EntityName}}, err error) {
    domainModel = new(domain.{{$EntityName}})

    repositoryModelConcrete := repositoryModel.(*{{$EntityName}})

    domainModel.ID = repositoryModelConcrete.ID
    domainModel.{{$EntityName}} = repositoryModelConcrete.{{$EntityName}}

//***********************    Set ParentPath    **********************//
var parent{{$EntityName}}ID int64

if len(repositoryModelConcrete.Path) > 0 {
    pathIDs :=strings.Split(repositoryModelConcrete.Path, ";")
    pathIDs = pathIDs[:len(pathIDs) -1]
    for _, parent{{$EntityName}}IDRaw := range pathIDs {
        parent{{$EntityName}}ID, err = strconv.ParseInt(parent{{$EntityName}}IDRaw, 10, 64)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.ParentPathIDs = append(domainModel.ParentPathIDs, parent{{$EntityName}}ID)
    }
}

//************************    Set Subtags ************************//
var child{{$EntityName}}ID int64

if len(repositoryModelConcrete.Children) > 0 {
    for _, child{{$EntityName}}IDRaw := range strings.Split(repositoryModelConcrete.Children, ";"){
        child{{$EntityName}}ID, err = strconv.ParseInt(child{{$EntityName}}IDRaw, 10, 64)
        if err != nil {
repo.Logger.Error(err)

return
        }

        domainModel.SubtagIDs = append(domainModel.SubtagIDs, child{{$EntityName}}ID)
    }
}

    repositoryModel = repositoryModelConcrete

    return
}
{{end}}

//******************************************************************//
//                         Filter Converter                         //
//******************************************************************//
{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryFilter(ctx context.Context, domainFilter *domain.{{$EntityName}}Filter) (repositoryFilter any, err error)  {
    repositoryFilterConcrete := new({{$EntityName}}Filter)

    repositoryFilterConcrete.URL = domainFilter.URL
    repositoryFilterConcrete.ID = domainFilter.ID

    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    if domainFilter.CreatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.CreatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.CreatedAt.Set(convertedFilter)
    }
    if domainFilter.UpdatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.UpdatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.UpdatedAt.Set(convertedFilter)
    }
    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.String]

        convertedFilter, err = model.ConvertFilter[null.String, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullStr)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.DeletedAt.Set(convertedFilter)
    }
    {{else}}
    repositoryFilterConcrete.CreatedAt = domainFilter.CreatedAt
    repositoryFilterConcrete.UpdatedAt = domainFilter.UpdatedAt

    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.Time]

        convertedFilter, err = model.ConvertFilter[null.Time, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullTime)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.DeletedAt.Set(convertedFilter)
    }
    {{end}}


    //*************************    Set Title    ************************//
    if domainFilter.Title.HasValue {
        var convertedFilter model.FilterOperation[null.String]

        convertedFilter, err = model.ConvertFilter[null.String, optional.Optional[string]](domainFilter.Title.Wrappee, repoCommon.OptionalStringToNullString)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.Title.Set(convertedFilter)
    }



    //******************    Set IsRead/IsCollection    *****************//
    if domainFilter.IsRead.HasValue {
        var convertedFilter model.FilterOperation[int64]

        convertedFilter, err = model.ConvertFilter[int64, bool](domainFilter.IsRead.Wrappee, repoCommon.BoolToInt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.IsRead.Set(convertedFilter)
    }

    if domainFilter.IsCollection.HasValue {
        var convertedFilter model.FilterOperation[int64]

        convertedFilter, err = model.ConvertFilter[int64, bool](domainFilter.IsCollection.Wrappee, repoCommon.BoolToInt)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.IsCollection.Set(convertedFilter)
    }


    //*************************    Set Tags    *************************//

    if domainFilter.TagIDs.HasValue {
        var convertedFilter model.FilterOperation[*Tag]

        converter := func (tagID int64) (*Tag, error) {return Tags(TagWhere.ID.EQ(tagID)).One(ctx, repo.db)}
        convertedFilter, err = model.ConvertFilter[*Tag, int64](domainFilter.TagIDs.Wrappee, converter)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.Tags.Set(convertedFilter)
    }

    //*************************    Set Type    *************************//

    var convertedTypeIDFilter model.FilterOperation[null.Int64]
    if domainFilter.{{$EntityName}}Type.HasValue {
        convertedTypeIDFilter, err = model.ConvertFilter[null.Int64,optional.Optional[string]](domainFilter.{{$EntityName}}Type.Wrappee, func(type_ optional.Optional[string]) (null.Int64, error) {
            if !type_.HasValue {
                return  null.NewInt64(-1, false), nil
            }


            bookmarkType, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(type_.Wrappee)).One(ctx, repo.db)

            return null.NewInt64(bookmarkType.ID, true), err
        })
        if err != nil {
repo.Logger.Error(err)

return
        }


        repositoryFilterConcrete.{{$EntityName}}TypeID.Set(convertedTypeIDFilter)
    }

    repositoryFilter = repositoryFilterConcrete

    return
}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryFilter(ctx context.Context, domainFilter *domain.{{$EntityName}}Filter) (repositoryFilter any, err error)  {

    repositoryFilterConcrete := new({{$EntityName}}Filter)

    repositoryFilterConcrete.Path = domainFilter.Path
    repositoryFilterConcrete.ID = domainFilter.ID


    //**********************    Set Timestamps    **********************//
    {{ if eq .DatabaseName "sqlite3"}}
    if domainFilter.CreatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.CreatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.CreatedAt.Set(convertedFilter)
    }
    if domainFilter.UpdatedAt.HasValue {
        var convertedFilter model.FilterOperation[string]

        convertedFilter, err = model.ConvertFilter[string, time.Time](domainFilter.UpdatedAt.Wrappee, repoCommon.TimeToStr)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.UpdatedAt.Set(convertedFilter)
    }
    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.String]

        convertedFilter, err = model.ConvertFilter[null.String, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullStr)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.DeletedAt.Set(convertedFilter)
    }
    {{else}}
    repositoryFilterConcrete.CreatedAt = domainFilter.CreatedAt
    repositoryFilterConcrete.UpdatedAt = domainFilter.UpdatedAt

    if domainFilter.DeletedAt.HasValue {
        var convertedFilter model.FilterOperation[null.Time]

        convertedFilter, err = model.ConvertFilter[null.Time, optional.Optional[time.Time]](domainFilter.DeletedAt.Wrappee, repoCommon.OptionalTimeToNullTime)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.DeletedAt.Set(convertedFilter)
    }
    {{end}}

    //*************************    Set Tags    *************************//
    if domainFilter.TagIDs.HasValue {
        var convertedFilter model.FilterOperation[*Tag]

        converter := func (tagID int64) (*Tag, error) {return Tags(TagWhere.ID.EQ(tagID)).One(ctx, repo.db)}
        convertedFilter, err = model.ConvertFilter[*Tag, int64](domainFilter.TagIDs.Wrappee, converter)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.Tags.Set(convertedFilter)
    }

    //*************************    Set Type    *************************//
    if domainFilter.{{$EntityName}}Type.HasValue {
        var convertedTypeIDFilter model.FilterOperation[null.Int64]

        convertedTypeIDFilter, err = model.ConvertFilter[null.Int64,optional.Optional[string]](domainFilter.{{$EntityName}}Type.Wrappee, func(type_ optional.Optional[string]) (null.Int64, error) {
            if !type_.HasValue {
                return  null.NewInt64(-1, false), nil
            }


            bookmarkType, err := {{$EntityName}}Types({{$EntityName}}TypeWhere.{{$EntityName}}Type.EQ(type_.Wrappee)).One(ctx, repo.db)

            return null.NewInt64(bookmarkType.ID, true), err
        })
        if err != nil {
repo.Logger.Error(err)

return
        }


        repositoryFilterConcrete.{{$EntityName}}TypeID.Set(convertedTypeIDFilter)
    }


    //**************    Set linked/backlinked documents    *************//
    if domainFilter.Linked{{$EntityName}}IDs.HasValue {
        var convertedFilter model.FilterOperation[*{{$EntityName}}]

        converter := func (documentID int64) (*Document, error) {return Documents(DocumentWhere.ID.EQ(documentID)).One(ctx, repo.db)}
        convertedFilter, err = model.ConvertFilter[*{{$EntityName}},int64](domainFilter.Linked{{$EntityName}}IDs.Wrappee, converter)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.Source{{$EntityName}}s.Set(convertedFilter)
    }
    if domainFilter.Backlinked{{$EntityName}}sIDs.HasValue {
        var convertedFilter model.FilterOperation[*{{$EntityName}}]

        converter := func (documentID int64) (*Document, error) {return Documents(DocumentWhere.ID.EQ(documentID)).One(ctx, repo.db)}
        convertedFilter, err = model.ConvertFilter[*{{$EntityName}},int64](domainFilter.Backlinked{{$EntityName}}sIDs.Wrappee, converter)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryFilterConcrete.Destination{{$EntityName}}s.Set(convertedFilter)
    }

    repositoryFilter = repositoryFilterConcrete

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryFilter(ctx context.Context, domainFilter *domain.{{$EntityName}}Filter) (repositoryFilter any, err error)  {
    repositoryFilterConcrete := new({{$EntityName}}Filter)

	repositoryFilterConcrete.ID = domainFilter.ID
	repositoryFilterConcrete.{{$EntityName}} = domainFilter.{{$EntityName}}

	if domainFilter.ParentPathIDs.HasValue {

		//*************************    Set Path    *************************//
		var convertedPathFilter model.FilterOperation[string]

		convertedPathFilter, err = model.ConvertFilter[string, int64](domainFilter.ParentPathIDs.Wrappee, func(tagID int64) (string, error) { return strconv.FormatInt(tagID, 10), nil })
		if err != nil {
			return
		}

		repositoryFilterConcrete.Path.Set(convertedPathFilter)
    }
	//**********************    Set child tags *********************//
	if domainFilter.SubtagIDs.HasValue {
		var convertedFilter model.FilterOperation[string]

		convertedFilter, err = model.ConvertFilter[string, int64](domainFilter.SubtagIDs.Wrappee, func(tagID int64) (string, error) { return strconv.FormatInt(tagID, 10), nil })
		if err != nil {
			return
		}

		repositoryFilterConcrete.Children.Set(convertedFilter)
	}

    repositoryFilter = repositoryFilterConcrete

	return
}
{{end}}
//******************************************************************//
//                         Updater Converter                        //
//******************************************************************//
{{if eq $EntityName "Bookmark"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryUpdater(ctx context.Context, domainUpdater *domain.{{$EntityName}}Updater) (repositoryUpdater any, err error)  {
    repositoryUpdaterConcrete := new({{$EntityName}}Updater)

	if domainUpdater.CreatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.CreatedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.CreatedAt.Set(model.UpdateOperation[string]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.CreatedAt.Set(model.UpdateOperation[time.Time]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: domainUpdater.CreatedAt.Wrappee.Operand})
        {{ end}}
    }

	if domainUpdater.UpdatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.UpdatedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.UpdatedAt.Set(model.UpdateOperation[string]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.UpdatedAt.Set(model.UpdateOperation[time.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: domainUpdater.UpdatedAt.Wrappee.Operand})
        {{ end }}
    }

	if domainUpdater.DeletedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater null.String
        convertedUpdater, err = repoCommon.OptionalTimeToNullStr(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.DeletedAt.Set(model.UpdateOperation[null.String]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.DeletedAt.Set(model.UpdateOperation[null.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedTime})
        {{ end }}
    }

	if domainUpdater.URL.HasValue {
        repositoryUpdaterConcrete.URL.Set(model.UpdateOperation[string]{Operator: domainUpdater.URL.Wrappee.Operator, Operand: domainUpdater.URL.Wrappee.Operand})
    }

	if domainUpdater.Title.HasValue {
        var convertedUpdater null.String
        convertedUpdater, err = repoCommon.OptionalStringToNullString(domainUpdater.Title.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.Title.Set(model.UpdateOperation[null.String]{Operator: domainUpdater.Title.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.TagIDs.HasValue {
        var rawTag *Tag
        convertedUpdater := make(TagSlice, 0, len(domainUpdater.TagIDs.Wrappee.Operand))

        for _, tag := range domainUpdater.TagIDs.Wrappee.Operand {
            rawTag, err =  Tags(TagWhere.ID.EQ(tag)).One(ctx, repo.db)
            if err != nil {
repo.Logger.Error(err)

return
            }

            convertedUpdater = append(convertedUpdater, rawTag)
        }

        repositoryUpdaterConcrete.Tags.Set(model.UpdateOperation[TagSlice]{Operator: domainUpdater.TagIDs.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.ID.HasValue {
        repositoryUpdaterConcrete.ID.Set(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: domainUpdater.ID.Wrappee.Operand})
    }

	if domainUpdater.IsCollection.HasValue {
        var convertedUpdater int64
        convertedUpdater, err = repoCommon.BoolToInt(domainUpdater.IsCollection.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.IsCollection.Set(model.UpdateOperation[int64]{Operator: domainUpdater.IsCollection.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.IsRead.HasValue {
        var convertedUpdater int64
        convertedUpdater, err = repoCommon.BoolToInt(domainUpdater.IsRead.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.IsRead.Set(model.UpdateOperation[int64]{Operator: domainUpdater.IsRead.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.{{$EntityName}}Type.HasValue {
        repositoryUpdaterConcrete.ID.Set(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: domainUpdater.ID.Wrappee.Operand})
    }

    repositoryUpdater = repositoryUpdaterConcrete

    return

}
{{end}}
{{if eq $EntityName "Document"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryUpdater(ctx context.Context, domainUpdater *domain.{{$EntityName}}Updater) (repositoryUpdater any, err error)  {
    repositoryUpdaterConcrete := new({{$EntityName}}Updater)

	if domainUpdater.{{$EntityName}}Type.HasValue {
        var convertedUpdater null.Int64
        if domainUpdater.{{$EntityName}}Type.Wrappee.Operand.HasValue {
            convertedUpdater = null.NewInt64(domainUpdater.ID.Wrappee.Operand, true)
        }

        repositoryUpdaterConcrete.{{$EntityName}}TypeID.Set(model.UpdateOperation[null.Int64]{Operator: domainUpdater.{{$EntityName}}Type.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Path.HasValue {
        repositoryUpdaterConcrete.Path.Set(model.UpdateOperation[string]{Operator: domainUpdater.Path.Wrappee.Operator, Operand: domainUpdater.Path.Wrappee.Operand})
    }

	if domainUpdater.CreatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.CreatedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.CreatedAt.Set(model.UpdateOperation[string]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.CreatedAt.Set(model.UpdateOperation[time.Time]{Operator: domainUpdater.CreatedAt.Wrappee.Operator, Operand: domainUpdater.CreatedAt.Wrappee.Operand})
        {{ end}}
    }

	if domainUpdater.UpdatedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater string
        convertedUpdater, err = repoCommon.TimeToStr(domainUpdater.UpdatedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.UpdatedAt.Set(model.UpdateOperation[string]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        repositoryUpdaterConcrete.UpdatedAt.Set(model.UpdateOperation[time.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: domainUpdater.UpdatedAt.Wrappee.Operand})
        {{ end }}
    }

	if domainUpdater.DeletedAt.HasValue {
        {{ if eq .DatabaseName "sqlite3" }}
        var convertedUpdater null.String
        convertedUpdater, err = repoCommon.OptionalTimeToNullStr(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.DeletedAt.Set(model.UpdateOperation[null.String]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedUpdater})
        {{ else }}
        var convertedTime null.Time
        convertedTime, err = repoCommon.OptionalTimeToNullTime(domainUpdater.DeletedAt.Wrappee.Operand)
        if err != nil {
repo.Logger.Error(err)

return
        }

        repositoryUpdaterConcrete.DeletedAt.Set(model.UpdateOperation[null.Time]{Operator: domainUpdater.UpdatedAt.Wrappee.Operator, Operand: convertedTime})
        {{ end }}
    }

	if domainUpdater.TagIDs.HasValue {
        var rawTag *Tag
        convertedUpdater := make(TagSlice, 0, len(domainUpdater.TagIDs.Wrappee.Operand))

        for _, tag := range domainUpdater.TagIDs.Wrappee.Operand {
            rawTag, err =  Tags(TagWhere.ID.EQ(tag)).One(ctx, repo.db)
            if err != nil {
repo.Logger.Error(err)

return
            }

            convertedUpdater = append(convertedUpdater, rawTag)
        }

        repositoryUpdaterConcrete.Tags.Set(model.UpdateOperation[TagSlice]{Operator: domainUpdater.TagIDs.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Linked{{$EntityName}}IDs.HasValue {
        var converted{{$EntityName}}Raw *Document
        convertedUpdater := make({{$EntityName}}Slice, 0, len(domainUpdater.Linked{{$EntityName}}IDs.Wrappee.Operand))

        for _, document := range domainUpdater.Linked{{$EntityName}}IDs.Wrappee.Operand {
            converted{{$EntityName}}Raw, err =  Documents(DocumentWhere.ID.EQ(document)).One(ctx, repo.db)
            if err != nil {
repo.Logger.Error(err)

return
            }

            convertedUpdater = append(convertedUpdater, converted{{$EntityName}}Raw)
        }

        repositoryUpdaterConcrete.Destination{{$EntityName}}s.Set(model.UpdateOperation[{{$EntityName}}Slice]{Operator: domainUpdater.Linked{{$EntityName}}IDs.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.Backlinked{{$EntityName}}sIDs.HasValue {
        var converted{{$EntityName}}Raw any
        convertedUpdater := make({{$EntityName}}Slice, 0, len(domainUpdater.Backlinked{{$EntityName}}sIDs.Wrappee.Operand))

        for _, document := range domainUpdater.Backlinked{{$EntityName}}sIDs.Wrappee.Operand {
            converted{{$EntityName}}Raw, err =  Documents(DocumentWhere.ID.EQ(document)).One(ctx, repo.db)
            if err != nil {
repo.Logger.Error(err)

return
            }

            convertedUpdater = append(convertedUpdater, converted{{$EntityName}}Raw.(*{{$EntityName}}))
        }

        repositoryUpdaterConcrete.Source{{$EntityName}}s.Set(model.UpdateOperation[{{$EntityName}}Slice]{Operator: domainUpdater.Backlinked{{$EntityName}}sIDs.Wrappee.Operator, Operand: convertedUpdater})
    }

	if domainUpdater.ID.HasValue {
        repositoryUpdaterConcrete.ID.Set(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: domainUpdater.ID.Wrappee.Operand})
    }

    repositoryUpdater = repositoryUpdaterConcrete

    return
}
{{end}}
{{if eq $EntityName "Tag"}}
func (repo *{{$StructName}}) {{$EntityName}}DomainToRepositoryUpdater(ctx context.Context, domainUpdater *domain.{{$EntityName}}Updater) (repositoryUpdater any, err error)  {
    repositoryUpdaterConcrete := new({{$EntityName}}Updater)

	//**************************    Set tag    *************************//
	if domainUpdater.{{$EntityName}}.HasValue {
		repositoryUpdaterConcrete.{{$EntityName}}.Set(model.UpdateOperation[string]{Operator: domainUpdater.{{$EntityName}}.Wrappee.Operator, Operand: domainUpdater.{{$EntityName}}.Wrappee.Operand})
	}

	//***********    Set ParentPath    ***********//
	if domainUpdater.ParentPathIDs.HasValue {
		tagID := domainUpdater.ParentPathIDs.Wrappee.Operand[len(domainUpdater.ParentPathIDs.Wrappee.Operand)-1]

		repositoryUpdaterConcrete.Parent{{$EntityName}}.Set(model.UpdateOperation[null.Int64]{Operator: domainUpdater.ParentPathIDs.Wrappee.Operator, Operand: null.NewInt64(tagID, true)})

		pathIDs := make([]string, 0, len(domainUpdater.ParentPathIDs.Wrappee.Operand)+1)
		for _, tagID := range domainUpdater.ParentPathIDs.Wrappee.Operand {
			pathIDs = append(pathIDs, strconv.FormatInt(tagID, 10))
		}

		pathIDs = append(pathIDs, strconv.FormatInt(tagID, 10))

		repositoryUpdaterConcrete.Path.Set(model.UpdateOperation[string]{Operator: domainUpdater.ParentPathIDs.Wrappee.Operator, Operand: strings.Join(pathIDs, ";")})
	}

	//***********************    Set Children    ***********************//
	if domainUpdater.SubtagIDs.HasValue {
		pathIDs := make([]string, 0, len(domainUpdater.SubtagIDs.Wrappee.Operand)+1)
		for _, tagID := range domainUpdater.SubtagIDs.Wrappee.Operand {
			pathIDs = append(pathIDs, strconv.FormatInt(tagID, 10))
		}

		repositoryUpdaterConcrete.Children.Set(model.UpdateOperation[string]{Operator: domainUpdater.SubtagIDs.Wrappee.Operator, Operand: strings.Join(pathIDs, ";")})
	}

	//**************************    Set ID    **************************//
	if domainUpdater.ID.HasValue {
		repositoryUpdaterConcrete.ID.Set(model.UpdateOperation[int64]{Operator: domainUpdater.ID.Wrappee.Operator, Operand: domainUpdater.ID.Wrappee.Operand})
	}

    repositoryUpdater = repositoryUpdaterConcrete

	return
}
{{end}}


func (repo *{{$StructName}}) UpdateRelatedEntities(ctx context.Context, tx *sql.Tx, repositoryModel *{{$EntityName}}) error  {
	var err error

	if repositoryModel.R == nil {
		return nil
	}

{{if eq $EntityName "Bookmark"}}
	err = repositoryModel.SetTags(ctx, tx, false, repositoryModel.R.Tags...)
	if err != nil {
		repo.Logger.Error(err)

return err
	}
    if repositoryModel.R.BookmarkType != nil {
        err = repositoryModel.SetBookmarkType(ctx, tx, false, repositoryModel.R.BookmarkType)
        if err != nil {
            repo.Logger.Error(err)

return err
        }
    }

	return nil
{{else if eq $EntityName "Document"}}

	err = repositoryModel.SetSourceDocuments(ctx, tx, false, repositoryModel.R.SourceDocuments...)
	if err != nil {
		repo.Logger.Error(err)

return err
	}

	err = repositoryModel.SetDestinationDocuments(ctx, tx, false, repositoryModel.R.DestinationDocuments...)
	if err != nil {
		repo.Logger.Error(err)

return err
	}

	err = repositoryModel.SetTags(ctx, tx, false, repositoryModel.R.Tags...)
	if err != nil {
		repo.Logger.Error(err)

return err
	}

    if repositoryModel.R.DocumentType != nil {
        err = repositoryModel.SetDocumentType(ctx, tx, false, repositoryModel.R.DocumentType)
        if err != nil {
            repo.Logger.Error(err)

return err
        }
    }

	return nil
{{else if eq $EntityName "Tag"}}
    parentTagTag := repositoryModel.R.ParentTagTag

    if parentTagTag != nil {

        if len(parentTagTag.Children) == 0 {
        parentTagTag.Children = strconv.FormatInt(repositoryModel.ID, 10)
        }  else {
        parentTagTag.Children += ";" + strconv.FormatInt(repositoryModel.ID, 10)
        }
    }

    return err
{{end}}
}

// PERF: This can probably be sped up by not using singular mode
func (repo *{{$StructName}}) LoadEntityRelations(ctx context.Context, tx *sql.Tx, repoModel *{{$EntityName}}) (err error) {
    if repoModel.R == nil {
        repoModel.R = repoModel.R.NewStruct()
    }

{{if eq $EntityName "Bookmark"}}
    err = repoModel.L.LoadTags(ctx, repo.db, true, repoModel, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = repoModel.L.LoadBookmarkType(ctx, repo.db, true, repoModel, nil)

    return
{{else if eq $EntityName "Document"}}
    err = repoModel.L.LoadDestinationDocuments(ctx, repo.db, true, repoModel, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = repoModel.L.LoadSourceDocuments(ctx, repo.db, true, repoModel, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = repoModel.L.LoadTags(ctx, repo.db, true, repoModel, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = repoModel.L.LoadDocumentType(ctx, repo.db, true, repoModel, nil)

    return
{{else if eq $EntityName "Tag"}}
    err = repoModel.L.LoadParentTagTag(ctx, repo.db, true, repoModel, nil)
    if err != nil {
repo.Logger.Error(err)

return
    }

    err = repoModel.L.LoadParentTagTags(ctx, repo.db, true, repoModel, nil)

    return
{{end}}
}
