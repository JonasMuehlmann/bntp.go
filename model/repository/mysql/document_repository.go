// Copyright Â© 2021-2022 Jonas Muehlmann
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// THIS CODE IS GENERATED BY GO GENERATE, IT'S TEMPLATE IS /templates/sql_repositories/Document_repository.go.tpl

package repository

type MysqlDocumentRepository struct {
    db *sql.DB
}
type DocumentField string

var DocumentFields = struct {
    ID  DocumentField
    Path  DocumentField
    DocumentTypeID  DocumentField
    CreatedAt  DocumentField
    UpdatedAt  DocumentField
    DeletedAt  DocumentField
    
}{
    ID: "id",
    Path: "path",
    DocumentTypeID: "document_type_id",
    CreatedAt: "created_at",
    UpdatedAt: "updated_at",
    DeletedAt: "deleted_at",
    
}

var DocumentFieldsList = []DocumentField{
    DocumentField("ID"),
    DocumentField("Path"),
    DocumentField("DocumentTypeID"),
    DocumentField("CreatedAt"),
    DocumentField("UpdatedAt"),
    DocumentField("DeletedAt"),
    
}

var DocumentRelationsList = []string{
    "DocumentType",
    "Tags",
    "SourceDocuments",
    "DestinationDocuments",
    
}

type DocumentFilter struct {
    ID optional.Optional[model.FilterOperation[int64]]
    Path optional.Optional[model.FilterOperation[string]]
    DocumentTypeID optional.Optional[model.FilterOperation[int64]]
    CreatedAt optional.Optional[model.FilterOperation[string]]
    UpdatedAt optional.Optional[model.FilterOperation[string]]
    DeletedAt optional.Optional[model.FilterOperation[null.String]]
    
    DocumentType optional.Optional[model.UpdateOperation[*DocumentType]]
    Tags optional.Optional[model.UpdateOperation[TagSlice]]
    SourceDocuments optional.Optional[model.UpdateOperation[DocumentSlice]]
    DestinationDocuments optional.Optional[model.UpdateOperation[DocumentSlice]]
    
}

type DocumentFilterMapping[T any] struct {
    Field DocumentField
    FilterOperation model.FilterOperation[T]
}

func (filter *DocumentFilter) GetSetFilters() *list.List {
    setFilters := list.New()

    if filter.ID.HasValue {
        setFilters.PushBack(DocumentFilterMapping[int64]{DocumentFields.ID, filter.ID.Wrappee})
    }
    if filter.Path.HasValue {
        setFilters.PushBack(DocumentFilterMapping[string]{DocumentFields.Path, filter.Path.Wrappee})
    }
    if filter.DocumentTypeID.HasValue {
        setFilters.PushBack(DocumentFilterMapping[int64]{DocumentFields.DocumentTypeID, filter.DocumentTypeID.Wrappee})
    }
    if filter.CreatedAt.HasValue {
        setFilters.PushBack(DocumentFilterMapping[string]{DocumentFields.CreatedAt, filter.CreatedAt.Wrappee})
    }
    if filter.UpdatedAt.HasValue {
        setFilters.PushBack(DocumentFilterMapping[string]{DocumentFields.UpdatedAt, filter.UpdatedAt.Wrappee})
    }
    if filter.DeletedAt.HasValue {
        setFilters.PushBack(DocumentFilterMapping[null.String]{DocumentFields.DeletedAt, filter.DeletedAt.Wrappee})
    }
    

    return setFilters
}

type DocumentUpdater struct {
    ID optional.Optional[model.UpdateOperation[int64]]
    Path optional.Optional[model.UpdateOperation[string]]
    DocumentTypeID optional.Optional[model.UpdateOperation[int64]]
    CreatedAt optional.Optional[model.UpdateOperation[string]]
    UpdatedAt optional.Optional[model.UpdateOperation[string]]
    DeletedAt optional.Optional[model.UpdateOperation[null.String]]
    
    DocumentType optional.Optional[model.UpdateOperation[*DocumentType]]
    Tags optional.Optional[model.UpdateOperation[TagSlice]]
    SourceDocuments optional.Optional[model.UpdateOperation[DocumentSlice]]
    DestinationDocuments optional.Optional[model.UpdateOperation[DocumentSlice]]
    
}

type DocumentUpdaterMapping[T any] struct {
    Field DocumentField
    Updater model.UpdateOperation[T]
}

func (updater *DocumentUpdater) GetSetUpdaters() *list.List {
    setUpdaters := list.New()

    if updater.ID.HasValue {
        setUpdaters.PushBack(DocumentUpdaterMapping[int64]{DocumentFields.ID, updater.ID.Wrappee})
    }
    if updater.Path.HasValue {
        setUpdaters.PushBack(DocumentUpdaterMapping[string]{DocumentFields.Path, updater.Path.Wrappee})
    }
    if updater.DocumentTypeID.HasValue {
        setUpdaters.PushBack(DocumentUpdaterMapping[int64]{DocumentFields.DocumentTypeID, updater.DocumentTypeID.Wrappee})
    }
    if updater.CreatedAt.HasValue {
        setUpdaters.PushBack(DocumentUpdaterMapping[string]{DocumentFields.CreatedAt, updater.CreatedAt.Wrappee})
    }
    if updater.UpdatedAt.HasValue {
        setUpdaters.PushBack(DocumentUpdaterMapping[string]{DocumentFields.UpdatedAt, updater.UpdatedAt.Wrappee})
    }
    if updater.DeletedAt.HasValue {
        setUpdaters.PushBack(DocumentUpdaterMapping[null.String]{DocumentFields.DeletedAt, updater.DeletedAt.Wrappee})
    }
    

    return setUpdaters
}

func (updater *DocumentUpdater) ApplyToModel(documentModel *Document) {
    if updater.ID.HasValue {
        model.ApplyUpdater(&(*documentModel).ID, updater.ID.Wrappee)
    }
    if updater.Path.HasValue {
        model.ApplyUpdater(&(*documentModel).Path, updater.Path.Wrappee)
    }
    if updater.DocumentTypeID.HasValue {
        model.ApplyUpdater(&(*documentModel).DocumentTypeID, updater.DocumentTypeID.Wrappee)
    }
    if updater.CreatedAt.HasValue {
        model.ApplyUpdater(&(*documentModel).CreatedAt, updater.CreatedAt.Wrappee)
    }
    if updater.UpdatedAt.HasValue {
        model.ApplyUpdater(&(*documentModel).UpdatedAt, updater.UpdatedAt.Wrappee)
    }
    if updater.DeletedAt.HasValue {
        model.ApplyUpdater(&(*documentModel).DeletedAt, updater.DeletedAt.Wrappee)
    }
    
}

type MysqlDocumentRepositoryHook func(context.Context, MysqlDocumentRepository) error

type queryModSlice []qm.QueryMod

func (s queryModSlice) Apply(q *queries.Query) {
    qm.Apply(q, s...)
}

func buildQueryModFilter[T any](filterField DocumentField, filterOperation model.FilterOperation[T]) queryModSlice {
    var newQueryMod queryModSlice

    filterOperator := filterOperation.Operator

    switch filterOperator {
    case model.FilterEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" = ?", filterOperand.Operand))
    case model.FilterNEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterNEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" != ?", filterOperand.Operand))
    case model.FilterGreaterThan:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterGreaterThan operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" > ?", filterOperand.Operand))
    case model.FilterGreaterThanEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterGreaterThanEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" >= ?", filterOperand.Operand))
    case model.FilterLessThan:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterLessThan operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" < ?", filterOperand.Operand))
    case model.FilterLessThanEqual:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterLessThanEqual operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" <= ?", filterOperand.Operand))
    case model.FilterIn:
        filterOperand, ok := filterOperation.Operand.(model.ListOperand[any])
        if !ok {
            panic("Expected a list operand for FilterIn operator")
        }

        newQueryMod = append(newQueryMod, qm.WhereIn(string(filterField)+" IN (?)", filterOperand.Operands))
    case model.FilterNotIn:
        filterOperand, ok := filterOperation.Operand.(model.ListOperand[any])
        if !ok {
            panic("Expected a list operand for FilterNotIn operator")
        }

        newQueryMod = append(newQueryMod, qm.WhereNotIn(string(filterField)+" IN (?)", filterOperand.Operands))
    case model.FilterBetween:
        filterOperand, ok := filterOperation.Operand.(model.RangeOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterBetween operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" BETWEEN ? AND ?", filterOperand.Start, filterOperand.End))
    case model.FilterNotBetween:
        filterOperand, ok := filterOperation.Operand.(model.RangeOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterNotBetween operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" NOT BETWEEN ? AND ?", filterOperand.Start, filterOperand.End))
    case model.FilterLike:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterLike operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" LIKE ?", filterOperand.Operand))
    case model.FilterNotLike:
        filterOperand, ok := filterOperation.Operand.(model.ScalarOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterLike operator")
        }

        newQueryMod = append(newQueryMod, qm.Where(string(filterField)+" NOT LIKE ?", filterOperand.Operand))
    case model.FilterOr:
        filterOperand, ok := filterOperation.Operand.(model.CompoundOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterOr operator")
        }
        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter(filterField, filterOperand.LHS)))
        newQueryMod = append(newQueryMod, qm.Or2(qm.Expr(buildQueryModFilter(filterField, filterOperand.RHS))))
    case model.FilterAnd:
        filterOperand, ok := filterOperation.Operand.(model.CompoundOperand[any])
        if !ok {
            panic("Expected a scalar operand for FilterAnd operator")
        }

        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter(filterField, filterOperand.LHS)))
        newQueryMod = append(newQueryMod, qm.Expr(buildQueryModFilter(filterField, filterOperand.RHS)))
    default:
        panic("Unhandled FilterOperator")
    }

    return newQueryMod
}

func buildQueryModListFromFilter(setFilters list.List) queryModSlice {
	queryModList := make(queryModSlice, 0, 6)

	for filter := setFilters.Front(); filter != nil; filter = filter.Next() {
		filterMapping, ok := filter.Value.(DocumentFilterMapping[any])
		if !ok {
			panic(fmt.Sprintf("Expected type %t but got %t", DocumentFilterMapping[any]{}, filter))
		}

        newQueryMod := buildQueryModFilter(filterMapping.Field, filterMapping.FilterOperation)

        for _, queryMod := range newQueryMod {
            queryModList = append(queryModList, queryMod)
        }
	}

	return queryModList
}

func (repo *MysqlDocumentRepository) New(args ...any) (MysqlDocumentRepository, error) {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) Add(ctx context.Context, domainModels []domain.Document) (numAffectedRecords int, newID int, err error) {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) Replace(ctx context.Context, domainModels []domain.Document) error {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) UpdateWhere(ctx context.Context, columnFilter domain.DocumentFilter, columnUpdaters map[domain.DocumentField]domain.DocumentUpdater) (numAffectedRecords int, err error) {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) Delete(ctx context.Context, domainModels []domain.Document) error {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) DeleteWhere(ctx context.Context, columnFilter domain.DocumentFilter) (numAffectedRecords int, err error) {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) CountWhere(ctx context.Context, columnFilter domain.DocumentFilter) int {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) CountAll(ctx context.Context) int {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) DoesExist(ctx context.Context, domainModel domain.Document) bool {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) DoesExistWhere(ctx context.Context, columnFilter domain.DocumentFilter) bool {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) GetWhere(ctx context.Context, columnFilter domain.DocumentFilter) []domain.Document {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) GetFirstWhere(ctx context.Context, columnFilter domain.DocumentFilter) domain.Document {
        panic("not implemented") // TODO: Implement
}

func (repo *MysqlDocumentRepository) GetAll(ctx context.Context) []domain.Document {
        panic("not implemented") // TODO: Implement
}
