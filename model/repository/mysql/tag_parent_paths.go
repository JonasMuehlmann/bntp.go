// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TagParentPath is an object representing the database table.
type TagParentPath struct {
	TagID       int `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	ParentTagID int `boil:"parent_tag_id" json:"parent_tag_id" toml:"parent_tag_id" yaml:"parent_tag_id"`
	Distance    int `boil:"distance" json:"distance" toml:"distance" yaml:"distance"`

	R *tagParentPathR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tagParentPathL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TagParentPathColumns = struct {
	TagID       string
	ParentTagID string
	Distance    string
}{
	TagID:       "tag_id",
	ParentTagID: "parent_tag_id",
	Distance:    "distance",
}

var TagParentPathTableColumns = struct {
	TagID       string
	ParentTagID string
	Distance    string
}{
	TagID:       "tag_parent_paths.tag_id",
	ParentTagID: "tag_parent_paths.parent_tag_id",
	Distance:    "tag_parent_paths.distance",
}

// Generated where

var TagParentPathWhere = struct {
	TagID       whereHelperint
	ParentTagID whereHelperint
	Distance    whereHelperint
}{
	TagID:       whereHelperint{field: "`tag_parent_paths`.`tag_id`"},
	ParentTagID: whereHelperint{field: "`tag_parent_paths`.`parent_tag_id`"},
	Distance:    whereHelperint{field: "`tag_parent_paths`.`distance`"},
}

// TagParentPathRels is where relationship names are stored.
var TagParentPathRels = struct {
}{}

// tagParentPathR is where relationships are stored.
type tagParentPathR struct {
}

// NewStruct creates a new relationship struct
func (*tagParentPathR) NewStruct() *tagParentPathR {
	return &tagParentPathR{}
}

// tagParentPathL is where Load methods for each relationship are stored.
type tagParentPathL struct{}

var (
	tagParentPathAllColumns            = []string{"tag_id", "parent_tag_id", "distance"}
	tagParentPathColumnsWithoutDefault = []string{"tag_id", "parent_tag_id", "distance"}
	tagParentPathColumnsWithDefault    = []string{}
	tagParentPathPrimaryKeyColumns     = []string{"parent_tag_id", "tag_id"}
	tagParentPathGeneratedColumns      = []string{}
)

type (
	// TagParentPathSlice is an alias for a slice of pointers to TagParentPath.
	// This should almost always be used instead of []TagParentPath.
	TagParentPathSlice []*TagParentPath
	// TagParentPathHook is the signature for custom TagParentPath hook methods
	TagParentPathHook func(context.Context, boil.ContextExecutor, *TagParentPath) error

	tagParentPathQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagParentPathType                 = reflect.TypeOf(&TagParentPath{})
	tagParentPathMapping              = queries.MakeStructMapping(tagParentPathType)
	tagParentPathPrimaryKeyMapping, _ = queries.BindMapping(tagParentPathType, tagParentPathMapping, tagParentPathPrimaryKeyColumns)
	tagParentPathInsertCacheMut       sync.RWMutex
	tagParentPathInsertCache          = make(map[string]insertCache)
	tagParentPathUpdateCacheMut       sync.RWMutex
	tagParentPathUpdateCache          = make(map[string]updateCache)
	tagParentPathUpsertCacheMut       sync.RWMutex
	tagParentPathUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tagParentPathAfterSelectHooks []TagParentPathHook

var tagParentPathBeforeInsertHooks []TagParentPathHook
var tagParentPathAfterInsertHooks []TagParentPathHook

var tagParentPathBeforeUpdateHooks []TagParentPathHook
var tagParentPathAfterUpdateHooks []TagParentPathHook

var tagParentPathBeforeDeleteHooks []TagParentPathHook
var tagParentPathAfterDeleteHooks []TagParentPathHook

var tagParentPathBeforeUpsertHooks []TagParentPathHook
var tagParentPathAfterUpsertHooks []TagParentPathHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TagParentPath) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TagParentPath) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TagParentPath) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TagParentPath) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TagParentPath) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TagParentPath) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TagParentPath) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TagParentPath) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TagParentPath) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tagParentPathAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTagParentPathHook registers your hook function for all future operations.
func AddTagParentPathHook(hookPoint boil.HookPoint, tagParentPathHook TagParentPathHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tagParentPathAfterSelectHooks = append(tagParentPathAfterSelectHooks, tagParentPathHook)
	case boil.BeforeInsertHook:
		tagParentPathBeforeInsertHooks = append(tagParentPathBeforeInsertHooks, tagParentPathHook)
	case boil.AfterInsertHook:
		tagParentPathAfterInsertHooks = append(tagParentPathAfterInsertHooks, tagParentPathHook)
	case boil.BeforeUpdateHook:
		tagParentPathBeforeUpdateHooks = append(tagParentPathBeforeUpdateHooks, tagParentPathHook)
	case boil.AfterUpdateHook:
		tagParentPathAfterUpdateHooks = append(tagParentPathAfterUpdateHooks, tagParentPathHook)
	case boil.BeforeDeleteHook:
		tagParentPathBeforeDeleteHooks = append(tagParentPathBeforeDeleteHooks, tagParentPathHook)
	case boil.AfterDeleteHook:
		tagParentPathAfterDeleteHooks = append(tagParentPathAfterDeleteHooks, tagParentPathHook)
	case boil.BeforeUpsertHook:
		tagParentPathBeforeUpsertHooks = append(tagParentPathBeforeUpsertHooks, tagParentPathHook)
	case boil.AfterUpsertHook:
		tagParentPathAfterUpsertHooks = append(tagParentPathAfterUpsertHooks, tagParentPathHook)
	}
}

// One returns a single tagParentPath record from the query.
func (q tagParentPathQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TagParentPath, error) {
	o := &TagParentPath{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tag_parent_paths")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TagParentPath records from the query.
func (q tagParentPathQuery) All(ctx context.Context, exec boil.ContextExecutor) (TagParentPathSlice, error) {
	var o []*TagParentPath

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TagParentPath slice")
	}

	if len(tagParentPathAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TagParentPath records in the query.
func (q tagParentPathQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tag_parent_paths rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tagParentPathQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tag_parent_paths exists")
	}

	return count > 0, nil
}

// TagParentPaths retrieves all the records using an executor.
func TagParentPaths(mods ...qm.QueryMod) tagParentPathQuery {
	mods = append(mods, qm.From("`tag_parent_paths`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`tag_parent_paths`.*"})
	}

	return tagParentPathQuery{q}
}

// FindTagParentPath retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTagParentPath(ctx context.Context, exec boil.ContextExecutor, parentTagID int, tagID int, selectCols ...string) (*TagParentPath, error) {
	tagParentPathObj := &TagParentPath{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tag_parent_paths` where `parent_tag_id`=? AND `tag_id`=?", sel,
	)

	q := queries.Raw(query, parentTagID, tagID)

	err := q.Bind(ctx, exec, tagParentPathObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tag_parent_paths")
	}

	if err = tagParentPathObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tagParentPathObj, err
	}

	return tagParentPathObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TagParentPath) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tag_parent_paths provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagParentPathColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tagParentPathInsertCacheMut.RLock()
	cache, cached := tagParentPathInsertCache[key]
	tagParentPathInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tagParentPathAllColumns,
			tagParentPathColumnsWithDefault,
			tagParentPathColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tagParentPathType, tagParentPathMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tagParentPathType, tagParentPathMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tag_parent_paths` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tag_parent_paths` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tag_parent_paths` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tagParentPathPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tag_parent_paths")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ParentTagID,
		o.TagID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tag_parent_paths")
	}

CacheNoHooks:
	if !cached {
		tagParentPathInsertCacheMut.Lock()
		tagParentPathInsertCache[key] = cache
		tagParentPathInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TagParentPath.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TagParentPath) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tagParentPathUpdateCacheMut.RLock()
	cache, cached := tagParentPathUpdateCache[key]
	tagParentPathUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tagParentPathAllColumns,
			tagParentPathPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tag_parent_paths, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tag_parent_paths` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tagParentPathPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tagParentPathType, tagParentPathMapping, append(wl, tagParentPathPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tag_parent_paths row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tag_parent_paths")
	}

	if !cached {
		tagParentPathUpdateCacheMut.Lock()
		tagParentPathUpdateCache[key] = cache
		tagParentPathUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tagParentPathQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tag_parent_paths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tag_parent_paths")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TagParentPathSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagParentPathPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tag_parent_paths` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagParentPathPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tagParentPath slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tagParentPath")
	}
	return rowsAff, nil
}

var mySQLTagParentPathUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TagParentPath) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tag_parent_paths provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagParentPathColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTagParentPathUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tagParentPathUpsertCacheMut.RLock()
	cache, cached := tagParentPathUpsertCache[key]
	tagParentPathUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tagParentPathAllColumns,
			tagParentPathColumnsWithDefault,
			tagParentPathColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tagParentPathAllColumns,
			tagParentPathPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert tag_parent_paths, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`tag_parent_paths`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tag_parent_paths` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tagParentPathType, tagParentPathMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tagParentPathType, tagParentPathMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tag_parent_paths")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tagParentPathType, tagParentPathMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for tag_parent_paths")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tag_parent_paths")
	}

CacheNoHooks:
	if !cached {
		tagParentPathUpsertCacheMut.Lock()
		tagParentPathUpsertCache[key] = cache
		tagParentPathUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TagParentPath record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TagParentPath) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TagParentPath provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tagParentPathPrimaryKeyMapping)
	sql := "DELETE FROM `tag_parent_paths` WHERE `parent_tag_id`=? AND `tag_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tag_parent_paths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tag_parent_paths")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tagParentPathQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tagParentPathQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tag_parent_paths")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tag_parent_paths")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TagParentPathSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tagParentPathBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagParentPathPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tag_parent_paths` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagParentPathPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tagParentPath slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tag_parent_paths")
	}

	if len(tagParentPathAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TagParentPath) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTagParentPath(ctx, exec, o.ParentTagID, o.TagID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagParentPathSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TagParentPathSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagParentPathPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tag_parent_paths`.* FROM `tag_parent_paths` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tagParentPathPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TagParentPathSlice")
	}

	*o = slice

	return nil
}

// TagParentPathExists checks if the TagParentPath row exists.
func TagParentPathExists(ctx context.Context, exec boil.ContextExecutor, parentTagID int, tagID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tag_parent_paths` where `parent_tag_id`=? AND `tag_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, parentTagID, tagID)
	}
	row := exec.QueryRowContext(ctx, sql, parentTagID, tagID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tag_parent_paths exists")
	}

	return exists, nil
}
