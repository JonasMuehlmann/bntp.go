// Copyright Â© 2021-2022 Jonas Muehlmann
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// THIS CODE IS GENERATED BY GO GENERATE, IT'S TEMPLATE IS /templates/bookmark.go.tpl

package domain

// TODO: Whe could remove the imports and only have one template if goimport could parse this...
import (
	"time"

	"github.com/JonasMuehlmann/bntp.go/model"
	"github.com/JonasMuehlmann/optional.go"
)

type Bookmark struct {
	CreatedAt    time.Time                    `json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time                    `json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    optional.Optional[time.Time] `json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	URL          string                       `json:"url" toml:"url" yaml:"url"`
	Title        optional.Optional[string]    `json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	TagIDs       []int64                      `json:"tagIDs" toml:"tagIDs" yaml:"tagIDs"`
	BookmarkType optional.Optional[string]    `json:"bookmark_type,omitempty" toml:"bookmark_type" yaml:"bookmark_type,omitempty"`
	ID           int64                        `json:"id" toml:"id" yaml:"id"`
	IsCollection bool                         `json:"is_collection,omitempty" toml:"is_collection" yaml:"is_collection,omitempty"`
	IsRead       bool                         `json:"is_read,omitempty" toml:"is_read" yaml:"is_read,omitempty"`
}

func (t *Bookmark) IsDefault() bool {

	var CreatedAtZero time.Time
	if t.CreatedAt != CreatedAtZero {

		return false
	}

	var UpdatedAtZero time.Time
	if t.UpdatedAt != UpdatedAtZero {

		return false
	}

	var DeletedAtZero optional.Optional[time.Time]
	if t.DeletedAt != DeletedAtZero {

		return false
	}

	var URLZero string
	if t.URL != URLZero {

		return false
	}

	var TitleZero optional.Optional[string]
	if t.Title != TitleZero {

		return false
	}

	if t.TagIDs != nil {

		return false
	}

	var IDZero int64
	if t.ID != IDZero {

		return false
	}

	var IsCollectionZero bool
	if t.IsCollection != IsCollectionZero {

		return false
	}

	var IsReadZero bool
	if t.IsRead != IsReadZero {

		return false
	}

	var BookmarkTypeZero optional.Optional[string]
	if t.BookmarkType != BookmarkTypeZero {

		return false
	}

	return true
}

type BookmarkField string

var BookmarkFieldsList = []BookmarkField{
	BookmarkField("CreatedAt"),
	BookmarkField("UpdatedAt"),
	BookmarkField("DeletedAt"),
	BookmarkField("URL"),
	BookmarkField("Title"),
	BookmarkField("TagIDs"),
	BookmarkField("ID"),
	BookmarkField("IsCollection"),
	BookmarkField("IsRead"),
	BookmarkField("BookmarkType"),
}

var BookmarkFields = struct {
	CreatedAt    BookmarkField
	UpdatedAt    BookmarkField
	DeletedAt    BookmarkField
	URL          BookmarkField
	Title        BookmarkField
	TagIDs       BookmarkField
	ID           BookmarkField
	IsCollection BookmarkField
	IsRead       BookmarkField
	BookmarkType BookmarkField
}{
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	URL:          "url",
	Title:        "title",
	TagIDs:       "tagIDs",
	ID:           "id",
	IsCollection: "is_collection",
	IsRead:       "is_read",
	BookmarkType: "bookmark_type",
}

func (bookmark *Bookmark) GetCreatedAt() time.Time {
	return bookmark.CreatedAt
}
func (bookmark *Bookmark) GetUpdatedAt() time.Time {
	return bookmark.UpdatedAt
}
func (bookmark *Bookmark) GetDeletedAt() optional.Optional[time.Time] {
	return bookmark.DeletedAt
}
func (bookmark *Bookmark) GetURL() string {
	return bookmark.URL
}
func (bookmark *Bookmark) GetTitle() optional.Optional[string] {
	return bookmark.Title
}
func (bookmark *Bookmark) GetTagIDs() []int64 {
	return bookmark.TagIDs
}
func (bookmark *Bookmark) GetID() int64 {
	return bookmark.ID
}
func (bookmark *Bookmark) GetIsCollection() bool {
	return bookmark.IsCollection
}
func (bookmark *Bookmark) GetIsRead() bool {
	return bookmark.IsRead
}
func (bookmark *Bookmark) GetBookmarkType() optional.Optional[string] {
	return bookmark.BookmarkType
}

func (bookmark *Bookmark) GetCreatedAtRef() *time.Time {
	return &bookmark.CreatedAt
}
func (bookmark *Bookmark) GetUpdatedAtRef() *time.Time {
	return &bookmark.UpdatedAt
}
func (bookmark *Bookmark) GetDeletedAtRef() *optional.Optional[time.Time] {
	return &bookmark.DeletedAt
}
func (bookmark *Bookmark) GetURLRef() *string {
	return &bookmark.URL
}
func (bookmark *Bookmark) GetTitleRef() *optional.Optional[string] {
	return &bookmark.Title
}
func (bookmark *Bookmark) GetTagIDsRef() *[]int64 {
	return &bookmark.TagIDs
}
func (bookmark *Bookmark) GetIDRef() *int64 {
	return &bookmark.ID
}
func (bookmark *Bookmark) GetIsCollectionRef() *bool {
	return &bookmark.IsCollection
}
func (bookmark *Bookmark) GetIsReadRef() *bool {
	return &bookmark.IsRead
}
func (bookmark *Bookmark) GetBookmarkTypeRef() *optional.Optional[string] {
	return &bookmark.BookmarkType
}

type BookmarkFilter struct {
	CreatedAt    optional.Optional[model.FilterOperation[time.Time]]
	UpdatedAt    optional.Optional[model.FilterOperation[time.Time]]
	DeletedAt    optional.Optional[model.FilterOperation[optional.Optional[time.Time]]]
	URL          optional.Optional[model.FilterOperation[string]]
	Title        optional.Optional[model.FilterOperation[optional.Optional[string]]]
	TagIDs       optional.Optional[model.FilterOperation[int64]]
	ID           optional.Optional[model.FilterOperation[int64]]
	IsCollection optional.Optional[model.FilterOperation[bool]]
	IsRead       optional.Optional[model.FilterOperation[bool]]
	BookmarkType optional.Optional[model.FilterOperation[optional.Optional[string]]]
}

func (filter *BookmarkFilter) IsDefault() bool {
	if filter.CreatedAt.HasValue {
		return false
	}
	if filter.UpdatedAt.HasValue {
		return false
	}
	if filter.DeletedAt.HasValue {
		return false
	}
	if filter.URL.HasValue {
		return false
	}
	if filter.Title.HasValue {
		return false
	}
	if filter.TagIDs.HasValue {
		return false
	}
	if filter.ID.HasValue {
		return false
	}
	if filter.IsCollection.HasValue {
		return false
	}
	if filter.IsRead.HasValue {
		return false
	}
	if filter.BookmarkType.HasValue {
		return false
	}

	return true
}

type BookmarkUpdater struct {
	CreatedAt    optional.Optional[model.UpdateOperation[time.Time]]
	UpdatedAt    optional.Optional[model.UpdateOperation[time.Time]]
	DeletedAt    optional.Optional[model.UpdateOperation[optional.Optional[time.Time]]]
	URL          optional.Optional[model.UpdateOperation[string]]
	Title        optional.Optional[model.UpdateOperation[optional.Optional[string]]]
	TagIDs       optional.Optional[model.UpdateOperation[[]int64]]
	BookmarkType optional.Optional[model.UpdateOperation[optional.Optional[string]]]
	ID           optional.Optional[model.UpdateOperation[int64]]
	IsCollection optional.Optional[model.UpdateOperation[bool]]
	IsRead       optional.Optional[model.UpdateOperation[bool]]
}

func (updater *BookmarkUpdater) IsDefault() bool {
	if updater.CreatedAt.HasValue {
		return false
	}
	if updater.UpdatedAt.HasValue {
		return false
	}
	if updater.DeletedAt.HasValue {
		return false
	}
	if updater.URL.HasValue {
		return false
	}
	if updater.Title.HasValue {
		return false
	}
	if updater.TagIDs.HasValue {
		return false
	}
	if updater.ID.HasValue {
		return false
	}
	if updater.IsCollection.HasValue {
		return false
	}
	if updater.IsRead.HasValue {
		return false
	}
	if updater.BookmarkType.HasValue {
		return false
	}

	return true
}

const (
	BookmarkFilterUntitled = "BookmarkFilterUntitled"
	BookmarkFilterUntagged = "BookmarkFilterUntagged"
	BookmarkFilterInboxed  = "BookmarkFilterInboxed"
	BookmarkFilterDeleted  = "BookmarkFilterDeleted"
)

var PredefinedBookmarkFilters = map[string]BookmarkFilter{
	BookmarkFilterUntitled: {Title: optional.Make(model.FilterOperation[optional.Optional[string]]{
		Operand: model.ScalarOperand[optional.Optional[string]]{
			Operand: optional.Optional[string]{},
		},
		Operator: model.FilterEqual,
	})},
	// FIX: This operating on int64s instead of the slice is nonsense, right?
	BookmarkFilterUntagged: {TagIDs: optional.Make(model.FilterOperation[int64]{
		Operand: model.ScalarOperand[int64]{
			Operand: -1,
		},
		Operator: model.FilterEqual,
	})},
	// FIX: This operating on int64s instead of the slice is nonsense, right?
	BookmarkFilterInboxed: {
		Title: optional.Make(model.FilterOperation[optional.Optional[string]]{
			Operand: model.ScalarOperand[optional.Optional[string]]{
				Operand: optional.Optional[string]{},
			},
			Operator: model.FilterEqual,
		}),
		TagIDs: optional.Make(model.FilterOperation[int64]{
			Operand: model.ScalarOperand[int64]{
				Operand: -1,
			},
			Operator: model.FilterEqual,
		})},
	BookmarkFilterDeleted: {DeletedAt: optional.Make(model.FilterOperation[optional.Optional[time.Time]]{
		Operand: model.ScalarOperand[optional.Optional[time.Time]]{
			Operand: optional.Optional[time.Time]{},
		},
		Operator: model.FilterEqual,
	})},
}
